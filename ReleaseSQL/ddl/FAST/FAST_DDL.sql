
CREATE SEQUENCE TY001_LANGUAGE_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE TY003_RESOURCE_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE TY007_FIELD_SET_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY000_USER_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY001_PROGRAM_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY002_TIME_WINDOW_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY003_FORM_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY004_SECTION_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY005_FIELD_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY006_VALIDATION_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY007_VALIDATION_RULE_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY010_DOCUMENT_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY011_DOCUMENT_DATA_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE SEQUENCE YY014_SUBMISSION_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE TABLE TY001_LANGUAGE
(
	LANGUAGE_ID          NUMBER(10) NOT NULL ,
	LANGUAGE_TAG         VARCHAR2(35) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE TY001_LANGUAGE IS 'a language for text in the application';

COMMENT ON COLUMN TY001_LANGUAGE.LANGUAGE_ID IS 'unique system generated identifier for the language';

COMMENT ON COLUMN TY001_LANGUAGE.LANGUAGE_TAG IS 'IETF BCP 47 tag for the language

eg.
"en" for English
"fr-CA" for Canadian French';

COMMENT ON COLUMN TY001_LANGUAGE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN TY001_LANGUAGE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN TY001_LANGUAGE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.';

COMMENT ON COLUMN TY001_LANGUAGE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN TY001_LANGUAGE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX TY001_PK ON TY001_LANGUAGE
(LANGUAGE_ID   ASC);

ALTER TABLE TY001_LANGUAGE
	ADD CONSTRAINT  TY001_PK PRIMARY KEY (LANGUAGE_ID);

CREATE UNIQUE INDEX TY001_AK1 ON TY001_LANGUAGE
(LANGUAGE_TAG   ASC);

ALTER TABLE TY001_LANGUAGE
ADD CONSTRAINT  TY001_AK1 UNIQUE (LANGUAGE_TAG);

ALTER TABLE TY001_LANGUAGE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE TY001_LANGUAGE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX TY001_IF1 ON TY001_LANGUAGE
(USER_CREATED_ID   ASC);

CREATE INDEX TY001_IF2 ON TY001_LANGUAGE
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE TY003_RESOURCE
(
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE TY003_RESOURCE IS 'a collection of translated labels';

COMMENT ON COLUMN TY003_RESOURCE.RESOURCE_ID IS 'Unique system generated identifier for the resource';

COMMENT ON COLUMN TY003_RESOURCE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN TY003_RESOURCE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN TY003_RESOURCE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.';

COMMENT ON COLUMN TY003_RESOURCE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN TY003_RESOURCE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX TY003_PK ON TY003_RESOURCE
(RESOURCE_ID   ASC);

ALTER TABLE TY003_RESOURCE
	ADD CONSTRAINT  TY003_PK PRIMARY KEY (RESOURCE_ID);

ALTER TABLE TY003_RESOURCE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE TY003_RESOURCE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX TY003_IF1 ON TY003_RESOURCE
(USER_CREATED_ID   ASC);

CREATE INDEX TY003_IF2 ON TY003_RESOURCE
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE TY004_FIELD_TYPE
(
	FIELD_TYPE_CD        VARCHAR2(20) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE TY004_FIELD_TYPE IS 'the list of possible types a field can be

eg. textbox, dropdown';

COMMENT ON COLUMN TY004_FIELD_TYPE.FIELD_TYPE_CD IS 'Unique code for the field type';

COMMENT ON COLUMN TY004_FIELD_TYPE.RESOURCE_ID IS 'the resource to be used for the field type''s name';

COMMENT ON COLUMN TY004_FIELD_TYPE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN TY004_FIELD_TYPE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN TY004_FIELD_TYPE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN TY004_FIELD_TYPE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN TY004_FIELD_TYPE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX TY004_PK ON TY004_FIELD_TYPE
(FIELD_TYPE_CD   ASC);

ALTER TABLE TY004_FIELD_TYPE
	ADD CONSTRAINT  TY004_PK PRIMARY KEY (FIELD_TYPE_CD);

ALTER TABLE TY004_FIELD_TYPE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE TY004_FIELD_TYPE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX TY004_IF1 ON TY004_FIELD_TYPE
(RESOURCE_ID   ASC);

CREATE INDEX TY004_IF2 ON TY004_FIELD_TYPE
(USER_CREATED_ID   ASC);

CREATE INDEX TY004_IF3 ON TY004_FIELD_TYPE
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE TY005_VALIDATION_ATTRIBUTE
(
	VALIDATION_ATTRIBUTE_CD VARCHAR2(20) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE TY005_VALIDATION_ATTRIBUTE IS 'contains a list of attributes a validation can validate

eg. text, length';

COMMENT ON COLUMN TY005_VALIDATION_ATTRIBUTE.VALIDATION_ATTRIBUTE_CD IS 'the unique code for the attribute';

COMMENT ON COLUMN TY005_VALIDATION_ATTRIBUTE.RESOURCE_ID IS 'the resource to use for the attribute''s label';

COMMENT ON COLUMN TY005_VALIDATION_ATTRIBUTE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN TY005_VALIDATION_ATTRIBUTE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN TY005_VALIDATION_ATTRIBUTE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN TY005_VALIDATION_ATTRIBUTE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN TY005_VALIDATION_ATTRIBUTE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX TY005_PK ON TY005_VALIDATION_ATTRIBUTE
(VALIDATION_ATTRIBUTE_CD   ASC);

ALTER TABLE TY005_VALIDATION_ATTRIBUTE
	ADD CONSTRAINT  TY005_PK PRIMARY KEY (VALIDATION_ATTRIBUTE_CD);

ALTER TABLE TY005_VALIDATION_ATTRIBUTE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE TY005_VALIDATION_ATTRIBUTE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX TY005_IF1 ON TY005_VALIDATION_ATTRIBUTE
(RESOURCE_ID   ASC);

CREATE INDEX TY005_IF2 ON TY005_VALIDATION_ATTRIBUTE
(USER_CREATED_ID   ASC);

CREATE INDEX TY005_IF3 ON TY005_VALIDATION_ATTRIBUTE
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE TY006_VALIDATION_OPERATOR
(
	VALIDATION_OPERATOR_CD VARCHAR2(20) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE TY006_VALIDATION_OPERATOR IS 'the operator to perform validation with

eg. <, >, <=, regex';

COMMENT ON COLUMN TY006_VALIDATION_OPERATOR.VALIDATION_OPERATOR_CD IS 'the unique code for the operator';

COMMENT ON COLUMN TY006_VALIDATION_OPERATOR.RESOURCE_ID IS 'the resource to use for the operator''s label';

COMMENT ON COLUMN TY006_VALIDATION_OPERATOR.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN TY006_VALIDATION_OPERATOR.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN TY006_VALIDATION_OPERATOR.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN TY006_VALIDATION_OPERATOR.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN TY006_VALIDATION_OPERATOR.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX TY006_PK ON TY006_VALIDATION_OPERATOR
(VALIDATION_OPERATOR_CD   ASC);

ALTER TABLE TY006_VALIDATION_OPERATOR
	ADD CONSTRAINT  TY006_PK PRIMARY KEY (VALIDATION_OPERATOR_CD);

ALTER TABLE TY006_VALIDATION_OPERATOR
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE TY006_VALIDATION_OPERATOR
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX TY006_IF1 ON TY006_VALIDATION_OPERATOR
(RESOURCE_ID   ASC);

CREATE INDEX TY006_IF2 ON TY006_VALIDATION_OPERATOR
(USER_CREATED_ID   ASC);

CREATE INDEX TY006_IF3 ON TY006_VALIDATION_OPERATOR
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE TY007_FIELD_SET
(
	FIELD_SET_ID         NUMBER(10) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE TY007_FIELD_SET IS 'a collection of allowed values for a field';

COMMENT ON COLUMN TY007_FIELD_SET.FIELD_SET_ID IS 'a unique system generated identifier for the field set';

COMMENT ON COLUMN TY007_FIELD_SET.RESOURCE_ID IS 'resource to be used for the optional name of the field set';

COMMENT ON COLUMN TY007_FIELD_SET.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN TY007_FIELD_SET.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN TY007_FIELD_SET.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN TY007_FIELD_SET.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN TY007_FIELD_SET.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX TY007_PK ON TY007_FIELD_SET
(FIELD_SET_ID   ASC);

ALTER TABLE TY007_FIELD_SET
	ADD CONSTRAINT  TY007_PK PRIMARY KEY (FIELD_SET_ID);

ALTER TABLE TY007_FIELD_SET
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE TY007_FIELD_SET
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX TY007_IF1 ON TY007_FIELD_SET
(RESOURCE_ID   ASC);

CREATE INDEX TY007_IF2 ON TY007_FIELD_SET
(USER_CREATED_ID   ASC);

CREATE INDEX TY007_IF3 ON TY007_FIELD_SET
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE TY008_FIELD_SET_VALUE
(
	FIELD_SET_ID         NUMBER(10) NOT NULL ,
	FIELD_SET_VALUE_CD   VARCHAR2(20) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL ,
	DISPLAY_SRT          NUMBER(3) NOT NULL 
);

COMMENT ON TABLE TY008_FIELD_SET_VALUE IS 'an entry for a given field set';

COMMENT ON COLUMN TY008_FIELD_SET_VALUE.FIELD_SET_ID IS 'the field set the value is for';

COMMENT ON COLUMN TY008_FIELD_SET_VALUE.FIELD_SET_VALUE_CD IS 'the key for the value';

COMMENT ON COLUMN TY008_FIELD_SET_VALUE.RESOURCE_ID IS 'resource to use as the label for the value';

COMMENT ON COLUMN TY008_FIELD_SET_VALUE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN TY008_FIELD_SET_VALUE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN TY008_FIELD_SET_VALUE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN TY008_FIELD_SET_VALUE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN TY008_FIELD_SET_VALUE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX TY008_PK ON TY008_FIELD_SET_VALUE
(FIELD_SET_ID   ASC,FIELD_SET_VALUE_CD   ASC);

ALTER TABLE TY008_FIELD_SET_VALUE
	ADD CONSTRAINT  TY008_PK PRIMARY KEY (FIELD_SET_ID,FIELD_SET_VALUE_CD);

ALTER TABLE TY008_FIELD_SET_VALUE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE TY008_FIELD_SET_VALUE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX TY008_IF1 ON TY008_FIELD_SET_VALUE
(FIELD_SET_ID   ASC);

CREATE INDEX TY008_IF2 ON TY008_FIELD_SET_VALUE
(RESOURCE_ID   ASC);

CREATE INDEX TY008_IF3 ON TY008_FIELD_SET_VALUE
(USER_CREATED_ID   ASC);

CREATE INDEX TY008_IF4 ON TY008_FIELD_SET_VALUE
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE WY000_USER
(
	USER_ID              NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NOT NULL 
);

COMMENT ON TABLE WY000_USER IS 'contains the users that are using the api';

COMMENT ON COLUMN WY000_USER.USER_ID IS 'a unique system generated identifier for the user';

COMMENT ON COLUMN WY000_USER.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY000_USER.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY000_USER.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY000_USER.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY000_USER.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.';

COMMENT ON COLUMN WY000_USER.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY000_PK ON WY000_USER
(USER_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY000_USER
	ADD CONSTRAINT  WY000_PK PRIMARY KEY (USER_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY000_USER
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY000_USER
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY001_PROGRAM
(
	PROGRAM_ID           NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY001_PROGRAM IS 'application connecting to the forms api';

COMMENT ON COLUMN WY001_PROGRAM.PROGRAM_ID IS 'Unique system generated identifier for the program';

COMMENT ON COLUMN WY001_PROGRAM.RESOURCE_ID IS 'The resource to be used for the forms label';

COMMENT ON COLUMN WY001_PROGRAM.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY001_PROGRAM.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY001_PROGRAM.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY001_PROGRAM.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY001_PROGRAM.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY001_PROGRAM.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY001_PK ON WY001_PROGRAM
(PROGRAM_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY001_PROGRAM
	ADD CONSTRAINT  WY001_PK PRIMARY KEY (PROGRAM_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY001_PROGRAM
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY001_PROGRAM
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY002_TIME_WINDOW
(
	TIME_WINDOW_ID       NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	DATE_START_DTE       DATE NOT NULL ,
	DATE_END_DTE         DATE NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY002_TIME_WINDOW IS 'defines a window in time with a start end end date';

COMMENT ON COLUMN WY002_TIME_WINDOW.TIME_WINDOW_ID IS 'the unique system generated identifier for the time window';

COMMENT ON COLUMN WY002_TIME_WINDOW.DATE_START_DTE IS 'the start date of the time window';

COMMENT ON COLUMN WY002_TIME_WINDOW.DATE_END_DTE IS 'the end date of the time window';

COMMENT ON COLUMN WY002_TIME_WINDOW.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY002_TIME_WINDOW.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY002_TIME_WINDOW.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY002_TIME_WINDOW.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY002_TIME_WINDOW.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY002_PK ON WY002_TIME_WINDOW
(TIME_WINDOW_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY002_TIME_WINDOW
	ADD CONSTRAINT  WY002_PK PRIMARY KEY (TIME_WINDOW_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY002_TIME_WINDOW
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY002_TIME_WINDOW
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY003_FORM
(
	FORM_ID              NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	PROGRAM_ID           NUMBER(10) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	ACTIVE_TIME_WINDOW_ID NUMBER(10) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY003_FORM IS 'stores a collection of sections and fields that together create a full form';

COMMENT ON COLUMN WY003_FORM.FORM_ID IS 'unique system generated identifier for the form';

COMMENT ON COLUMN WY003_FORM.PROGRAM_ID IS 'the program the form is for';

COMMENT ON COLUMN WY003_FORM.RESOURCE_ID IS 'the resouce to be used for the forms label';

COMMENT ON COLUMN WY003_FORM.ACTIVE_TIME_WINDOW_ID IS 'the time window the form is active for';

COMMENT ON COLUMN WY003_FORM.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY003_FORM.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY003_FORM.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY003_FORM.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY003_FORM.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY003_FORM.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY003_PK ON WY003_FORM
(FORM_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY003_FORM
	ADD CONSTRAINT  WY003_PK PRIMARY KEY (FORM_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY003_FORM
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY003_FORM
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY004_SECTION
(
	SECTION_ID           NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	FORM_ID              NUMBER(10) NOT NULL ,
	DISPLAY_SRT          NUMBER(3) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	SECTION_CD           VARCHAR2(20) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY004_SECTION IS 'contains the individual pages of a given form';

COMMENT ON COLUMN WY004_SECTION.SECTION_ID IS 'the unique system generated identifier for the section';

COMMENT ON COLUMN WY004_SECTION.DISPLAY_SRT IS 'the workflow''s position within the form';

COMMENT ON COLUMN WY004_SECTION.RESOURCE_ID IS 'the resource to be used for the workflow''s label';

COMMENT ON COLUMN WY004_SECTION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY004_SECTION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY004_SECTION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY004_SECTION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY004_SECTION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY004_SECTION.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

COMMENT ON COLUMN WY004_SECTION.SECTION_CD IS 'provides a meaningful key for the section';

CREATE UNIQUE INDEX WY004_PK ON WY004_SECTION
(SECTION_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY004_SECTION
	ADD CONSTRAINT  WY004_PK PRIMARY KEY (SECTION_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY004_SECTION
	MODIFY DISPLAY_SRT DEFAULT 0;

ALTER TABLE WY004_SECTION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY004_SECTION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY005_FIELD
(
	FIELD_ID             NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	FIELD_TYPE_CD        VARCHAR2(20) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	FIELD_SET_ID         NUMBER(10) NULL ,
	CSS_CLASSES_TXT      VARCHAR2(250) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY005_FIELD IS 'stores the definition for a form''s field';

COMMENT ON COLUMN WY005_FIELD.FIELD_ID IS 'A unique system generated identifier for the field';

COMMENT ON COLUMN WY005_FIELD.FIELD_TYPE_CD IS 'the type of field the field is';

COMMENT ON COLUMN WY005_FIELD.RESOURCE_ID IS 'the resource to use for the label of the field';

COMMENT ON COLUMN WY005_FIELD.FIELD_SET_ID IS 'Optional set of permitted values for the field';

COMMENT ON COLUMN WY005_FIELD.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY005_FIELD.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY005_FIELD.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY005_FIELD.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY005_FIELD.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY005_FIELD.CSS_CLASSES_TXT IS 'Optional list of CSS classes that apply to the field.';

COMMENT ON COLUMN WY005_FIELD.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY005_PK ON WY005_FIELD
(FIELD_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY005_FIELD
	ADD CONSTRAINT  WY005_PK PRIMARY KEY (FIELD_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY005_FIELD
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY005_FIELD
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY006_VALIDATION
(
	VALIDATION_ID        NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	ADMIN_RESOURCE_ID    NUMBER(10) NOT NULL ,
	ERROR_RESOURCE_ID    NUMBER(10) NOT NULL ,
	ERROR_MESSAGE_RESOURCE_ID NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY006_VALIDATION IS 'contains the definition for how to validate a field';

COMMENT ON COLUMN WY006_VALIDATION.VALIDATION_ID IS 'The unique system generated identifier for the validation';

COMMENT ON COLUMN WY006_VALIDATION.ADMIN_RESOURCE_ID IS 'the resource to be used for the label shown to admins';

COMMENT ON COLUMN WY006_VALIDATION.ERROR_RESOURCE_ID IS 'the resource to be used for the short description of the error';

COMMENT ON COLUMN WY006_VALIDATION.ERROR_MESSAGE_RESOURCE_ID IS 'the resource to be used for long description of the error';

COMMENT ON COLUMN WY006_VALIDATION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY006_VALIDATION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY006_VALIDATION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY006_VALIDATION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY006_VALIDATION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY006_VALIDATION.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY006_PK ON WY006_VALIDATION
(VALIDATION_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY006_VALIDATION
	ADD CONSTRAINT  WY006_PK PRIMARY KEY (VALIDATION_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY006_VALIDATION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY006_VALIDATION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY007_VALIDATION_RULE
(
	VALIDATION_RULE_ID   NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	VALIDATION_ID        NUMBER(10) NOT NULL ,
	VALIDATION_ATTRIBUTE_CD VARCHAR2(20) NOT NULL ,
	VALIDATION_OPERATOR_CD VARCHAR2(20) NOT NULL ,
	VALUE_TXT            VARCHAR2(250) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY007_VALIDATION_RULE IS 'contains the definitions for the indidual rules of the validation';

COMMENT ON COLUMN WY007_VALIDATION_RULE.VALIDATION_RULE_ID IS 'the unique system generated identifier for the validation rule';

COMMENT ON COLUMN WY007_VALIDATION_RULE.VALIDATION_ID IS 'the validation the rule is for';

COMMENT ON COLUMN WY007_VALIDATION_RULE.VALIDATION_ATTRIBUTE_CD IS 'the attribute to provide validation on';

COMMENT ON COLUMN WY007_VALIDATION_RULE.VALIDATION_OPERATOR_CD IS 'the operator to use for the validation';

COMMENT ON COLUMN WY007_VALIDATION_RULE.VALUE_TXT IS 'The value to validate with';

COMMENT ON COLUMN WY007_VALIDATION_RULE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY007_VALIDATION_RULE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY007_VALIDATION_RULE.DATE_DELETED_DTE IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY007_VALIDATION_RULE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY007_VALIDATION_RULE.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY007_PK ON WY007_VALIDATION_RULE
(VALIDATION_RULE_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY007_VALIDATION_RULE
	ADD CONSTRAINT  WY007_PK PRIMARY KEY (VALIDATION_RULE_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY007_VALIDATION_RULE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY007_VALIDATION_RULE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY008_XREF_FIELD_VALIDATION
(
	FIELD_ID             NUMBER(10) NOT NULL ,
	VALIDATION_ID        NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY008_XREF_FIELD_VALIDATION IS 'defines which validations to use for a given field';

COMMENT ON COLUMN WY008_XREF_FIELD_VALIDATION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY008_XREF_FIELD_VALIDATION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY008_XREF_FIELD_VALIDATION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY008_XREF_FIELD_VALIDATION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY008_XREF_FIELD_VALIDATION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY008_XREF_FIELD_VALIDATION.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY008_PK ON WY008_XREF_FIELD_VALIDATION
(FIELD_ID   ASC,VALIDATION_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY008_XREF_FIELD_VALIDATION
	ADD CONSTRAINT  WY008_PK PRIMARY KEY (FIELD_ID,VALIDATION_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY008_XREF_FIELD_VALIDATION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY008_XREF_FIELD_VALIDATION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY009_SECTION_FIELD
(
	SECTION_ID           NUMBER(10) NOT NULL ,
	FIELD_ID             NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	DISPLAY_SRT          NUMBER(3) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY009_SECTION_FIELD IS 'contains the list of fields and their ordering for a section';

COMMENT ON COLUMN WY009_SECTION_FIELD.DISPLAY_SRT IS 'the order the field should display in the section';

COMMENT ON COLUMN WY009_SECTION_FIELD.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY009_SECTION_FIELD.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY009_SECTION_FIELD.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY009_SECTION_FIELD.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY009_SECTION_FIELD.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY009_SECTION_FIELD.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY009_PK ON WY009_SECTION_FIELD
(SECTION_ID   ASC,FIELD_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY009_SECTION_FIELD
	ADD CONSTRAINT  WY009_PK PRIMARY KEY (SECTION_ID,FIELD_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY009_SECTION_FIELD
	MODIFY DISPLAY_SRT DEFAULT 0;

ALTER TABLE WY009_SECTION_FIELD
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY009_SECTION_FIELD
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY010_DOCUMENT
(
	DOCUMENT_ID          NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	FILE_NAME_NM         VARCHAR2(50) NOT NULL ,
	DOCUMENT_DATA_ID     NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY010_DOCUMENT IS 'stores uploaded documents in the system';

COMMENT ON COLUMN WY010_DOCUMENT.DOCUMENT_ID IS 'a unique system generated id for the document';

COMMENT ON COLUMN WY010_DOCUMENT.FILE_NAME_NM IS 'the file name of the document';

COMMENT ON COLUMN WY010_DOCUMENT.DOCUMENT_DATA_ID IS 'the data for the document';

COMMENT ON COLUMN WY010_DOCUMENT.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY010_DOCUMENT.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY010_DOCUMENT.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY010_DOCUMENT.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY010_DOCUMENT.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY010_DOCUMENT.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY010_PK ON WY010_DOCUMENT
(DOCUMENT_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY010_DOCUMENT
	ADD CONSTRAINT  WY010_PK PRIMARY KEY (DOCUMENT_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY010_DOCUMENT
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY010_DOCUMENT
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY012_FIELD_RESPONSE
(
	SUBMISSION_ID        NUMBER(10) NOT NULL ,
	SECTION_ID           NUMBER(10) NOT NULL ,
	FIELD_ID             NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	FIELD_RESPONSE_TXT   NVARCHAR2(2000) NULL ,
	DOCUMENT_ID          NUMBER(10) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY012_FIELD_RESPONSE IS 'stores the response a user made for a given field';

COMMENT ON COLUMN WY012_FIELD_RESPONSE.FIELD_RESPONSE_TXT IS 'the text value of the response';

COMMENT ON COLUMN WY012_FIELD_RESPONSE.DOCUMENT_ID IS 'the document attached to the response';

COMMENT ON COLUMN WY012_FIELD_RESPONSE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY012_FIELD_RESPONSE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY012_FIELD_RESPONSE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY012_FIELD_RESPONSE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY012_FIELD_RESPONSE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY012_FIELD_RESPONSE.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY012_PK ON WY012_FIELD_RESPONSE
(SUBMISSION_ID   ASC,SECTION_ID   ASC,FIELD_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY012_FIELD_RESPONSE
	ADD CONSTRAINT  WY012_PK PRIMARY KEY (SUBMISSION_ID,SECTION_ID,FIELD_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY012_FIELD_RESPONSE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY012_FIELD_RESPONSE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY013_XREF_USER_PROGRAM
(
	PROGRAM_ID           NUMBER(10) NOT NULL ,
	USER_ID              NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	IDENTIFIER_TXT       VARCHAR2(255) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY013_XREF_USER_PROGRAM IS 'the list of programs a user can access';

COMMENT ON COLUMN WY013_XREF_USER_PROGRAM.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY013_XREF_USER_PROGRAM.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY013_XREF_USER_PROGRAM.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY013_XREF_USER_PROGRAM.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY013_XREF_USER_PROGRAM.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY013_XREF_USER_PROGRAM.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY013_PK ON WY013_XREF_USER_PROGRAM
(PROGRAM_ID   ASC,USER_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY013_XREF_USER_PROGRAM
	ADD CONSTRAINT  WY013_PK PRIMARY KEY (PROGRAM_ID,USER_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY013_XREF_USER_PROGRAM
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY013_XREF_USER_PROGRAM
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY014_SUBMISSION
(
	SUBMISSION_ID        NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	FORM_ID              NUMBER(10) NOT NULL ,
	USER_ID              NUMBER(10) NOT NULL ,
	COMPLETE_IND         NUMBER(1) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY014_SUBMISSION IS 'contains a user''s response to a form';

COMMENT ON COLUMN WY014_SUBMISSION.SUBMISSION_ID IS 'the unique system generated id for the submission';

COMMENT ON COLUMN WY014_SUBMISSION.FORM_ID IS 'the form the submission is for';

COMMENT ON COLUMN WY014_SUBMISSION.USER_ID IS 'the user the submission is for';

COMMENT ON COLUMN WY014_SUBMISSION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY014_SUBMISSION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY014_SUBMISSION.COMPLETE_IND IS 'indicates if the submission is complete';

COMMENT ON COLUMN WY014_SUBMISSION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY014_SUBMISSION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY014_SUBMISSION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY014_SUBMISSION.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY014_PK ON WY014_SUBMISSION
(SUBMISSION_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY014_SUBMISSION
	ADD CONSTRAINT  WY014_PK PRIMARY KEY (SUBMISSION_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY014_SUBMISSION
	MODIFY COMPLETE_IND CONSTRAINT  VALID_INDICATOR_616339914 CHECK (COMPLETE_IND IN (0, 1));

ALTER TABLE WY014_SUBMISSION
	MODIFY COMPLETE_IND DEFAULT 0;

ALTER TABLE WY014_SUBMISSION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY014_SUBMISSION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY015_SUBMISSION_SECTION
(
	SUBMISSION_ID        NUMBER(10) NOT NULL ,
	SECTION_ID           NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	COMPLETE_IND         NUMBER(1) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY015_SUBMISSION_SECTION IS 'stores if a section has been fully completed for a submisison';

COMMENT ON COLUMN WY015_SUBMISSION_SECTION.COMPLETE_IND IS 'indicates if the section has been completed';

COMMENT ON COLUMN WY015_SUBMISSION_SECTION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY015_SUBMISSION_SECTION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY015_SUBMISSION_SECTION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY015_SUBMISSION_SECTION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY015_SUBMISSION_SECTION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY015_SUBMISSION_SECTION.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY015_PK ON WY015_SUBMISSION_SECTION
(SUBMISSION_ID   ASC,SECTION_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY015_SUBMISSION_SECTION
	ADD CONSTRAINT  WY015_PK PRIMARY KEY (SUBMISSION_ID,SECTION_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY015_SUBMISSION_SECTION
	MODIFY COMPLETE_IND CONSTRAINT  VALID_INDICATOR_1828192971 CHECK (COMPLETE_IND IN (0, 1));

ALTER TABLE WY015_SUBMISSION_SECTION
	MODIFY COMPLETE_IND DEFAULT 0;

ALTER TABLE WY015_SUBMISSION_SECTION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY015_SUBMISSION_SECTION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY016_FIELD_SET_RESPONSE
(
	SUBMISSION_ID        NUMBER(10) NOT NULL ,
	SECTION_ID           NUMBER(10) NOT NULL ,
	FIELD_ID             NUMBER(10) NOT NULL ,
	FIELD_SET_ID         NUMBER(10) NOT NULL ,
	FIELD_SET_VALUE_CD   VARCHAR2(20) NOT NULL ,
	SELECTED_IND         NUMBER(1) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(22) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(22) NULL 
);

COMMENT ON TABLE WY016_FIELD_SET_RESPONSE IS 'This table is used to keep track of selected values for checkbox fieldsets when filling out any section of the form.';

COMMENT ON COLUMN WY016_FIELD_SET_RESPONSE.SELECTED_IND IS 'This will be used to determine if a checkbox has been selected.

1 = selected
0 = not selected';

COMMENT ON COLUMN WY016_FIELD_SET_RESPONSE.USER_CREATED_ID IS 'a unique system generated identifier for the user created id';

COMMENT ON COLUMN WY016_FIELD_SET_RESPONSE.USER_LAST_UPDATE_ID IS 'a unique system generated identifier for the user last update id';

CREATE UNIQUE INDEX WY016_PK ON WY016_FIELD_SET_RESPONSE
(SUBMISSION_ID   ASC,SECTION_ID   ASC,FIELD_ID   ASC,FIELD_SET_ID   ASC,FIELD_SET_VALUE_CD   ASC);

ALTER TABLE WY016_FIELD_SET_RESPONSE
	ADD CONSTRAINT  WY016_PK PRIMARY KEY (SUBMISSION_ID,SECTION_ID,FIELD_ID,FIELD_SET_ID,FIELD_SET_VALUE_CD);

ALTER TABLE WY016_FIELD_SET_RESPONSE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY016_FIELD_SET_RESPONSE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY017_FIELD_RELATED
(
	FIELD_TARGET_ID      NUMBER(10) NOT NULL ,
	FIELD_RELATED_CD     VARCHAR2(20) NOT NULL ,
	FIELD_SOURCE_ID      NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY017_FIELD_RELATED IS 'Shadow table for TY009';

COMMENT ON COLUMN WY017_FIELD_RELATED.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY017_FIELD_RELATED.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY017_FIELD_RELATED.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY017_FIELD_RELATED.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY017_FIELD_RELATED.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY017_FIELD_RELATED.FIELD_RELATED_CD IS 'Stores a machine friendly name for the relationship';

CREATE UNIQUE INDEX WY017_PK ON WY017_FIELD_RELATED
(FIELD_TARGET_ID   ASC,FIELD_RELATED_CD   ASC);

ALTER TABLE WY017_FIELD_RELATED
	ADD CONSTRAINT  WY017_PK PRIMARY KEY (FIELD_TARGET_ID,FIELD_RELATED_CD);

ALTER TABLE WY017_FIELD_RELATED
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY017_FIELD_RELATED
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY101_LANGUAGE
(
	LANGUAGE_ID          NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	LANGUAGE_TAG         VARCHAR2(35) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NOT NULL 
);

COMMENT ON TABLE WY101_LANGUAGE IS 'a language for text in the application';

COMMENT ON COLUMN WY101_LANGUAGE.LANGUAGE_ID IS 'unique system generated identifier for the language';

COMMENT ON COLUMN WY101_LANGUAGE.LANGUAGE_TAG IS 'IETF BCP 47 tag for the language

eg.
"en" for English
"fr-CA" for Canadian French';

COMMENT ON COLUMN WY101_LANGUAGE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY101_LANGUAGE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY101_LANGUAGE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.';

COMMENT ON COLUMN WY101_LANGUAGE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY101_LANGUAGE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY101_LANGUAGE.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY101_PK ON WY101_LANGUAGE
(LANGUAGE_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY101_LANGUAGE
	ADD CONSTRAINT  WY101_PK PRIMARY KEY (LANGUAGE_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY101_LANGUAGE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY101_LANGUAGE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY102_LABEL
(
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	LANGUAGE_ID          NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	LABEL_TXT            NVARCHAR2(2000) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY102_LABEL IS 'the label text for a given resource and language';

COMMENT ON COLUMN WY102_LABEL.RESOURCE_ID IS 'The resource the label is for';

COMMENT ON COLUMN WY102_LABEL.LANGUAGE_ID IS 'The language the label is for';

COMMENT ON COLUMN WY102_LABEL.LABEL_TXT IS 'the text of the label';

COMMENT ON COLUMN WY102_LABEL.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.';

COMMENT ON COLUMN WY102_LABEL.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.';

COMMENT ON COLUMN WY102_LABEL.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.';

COMMENT ON COLUMN WY102_LABEL.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY102_LABEL.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY102_LABEL.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY102_PK ON WY102_LABEL
(RESOURCE_ID   ASC,LANGUAGE_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY102_LABEL
	ADD CONSTRAINT  WY102_PK PRIMARY KEY (RESOURCE_ID,LANGUAGE_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY102_LABEL
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY102_LABEL
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY103_RESOURCE
(
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY103_RESOURCE IS 'a collection of translated labels';

COMMENT ON COLUMN WY103_RESOURCE.RESOURCE_ID IS 'Unique system generated identifier for the resource';

COMMENT ON COLUMN WY103_RESOURCE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY103_RESOURCE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY103_RESOURCE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.';

COMMENT ON COLUMN WY103_RESOURCE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY103_RESOURCE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY103_RESOURCE.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY103_PK ON WY103_RESOURCE
(RESOURCE_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY103_RESOURCE
	ADD CONSTRAINT  WY103_PK PRIMARY KEY (RESOURCE_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY103_RESOURCE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY103_RESOURCE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY104_FIELD_TYPE
(
	FIELD_TYPE_CD        VARCHAR2(20) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY104_FIELD_TYPE IS 'the list of possible types a field can be

eg. textbox, dropdown';

COMMENT ON COLUMN WY104_FIELD_TYPE.FIELD_TYPE_CD IS 'Unique code for the field type';

COMMENT ON COLUMN WY104_FIELD_TYPE.RESOURCE_ID IS 'the resource to be used for the field type''s name';

COMMENT ON COLUMN WY104_FIELD_TYPE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY104_FIELD_TYPE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY104_FIELD_TYPE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY104_FIELD_TYPE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY104_FIELD_TYPE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY104_FIELD_TYPE.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY104_PK ON WY104_FIELD_TYPE
(FIELD_TYPE_CD   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY104_FIELD_TYPE
	ADD CONSTRAINT  WY104_PK PRIMARY KEY (FIELD_TYPE_CD,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY104_FIELD_TYPE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY104_FIELD_TYPE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY105_VALIDATION_ATTRIBUTE
(
	VALIDATION_ATTRIBUTE_CD VARCHAR2(20) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY105_VALIDATION_ATTRIBUTE IS 'contains a list of attributes a validation can validate

eg. text, length';

COMMENT ON COLUMN WY105_VALIDATION_ATTRIBUTE.VALIDATION_ATTRIBUTE_CD IS 'the unique code for the attribute';

COMMENT ON COLUMN WY105_VALIDATION_ATTRIBUTE.RESOURCE_ID IS 'the resource to use for the attribute''s label';

COMMENT ON COLUMN WY105_VALIDATION_ATTRIBUTE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY105_VALIDATION_ATTRIBUTE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY105_VALIDATION_ATTRIBUTE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY105_VALIDATION_ATTRIBUTE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY105_VALIDATION_ATTRIBUTE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY105_VALIDATION_ATTRIBUTE.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY105_PK ON WY105_VALIDATION_ATTRIBUTE
(VALIDATION_ATTRIBUTE_CD   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY105_VALIDATION_ATTRIBUTE
	ADD CONSTRAINT  WY105_PK PRIMARY KEY (VALIDATION_ATTRIBUTE_CD,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY105_VALIDATION_ATTRIBUTE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY105_VALIDATION_ATTRIBUTE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY106_VALIDATION_OPERATOR
(
	VALIDATION_OPERATOR_CD VARCHAR2(20) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY106_VALIDATION_OPERATOR IS 'the operator to perform validation with

eg. <, >, <=, regex';

COMMENT ON COLUMN WY106_VALIDATION_OPERATOR.VALIDATION_OPERATOR_CD IS 'the unique code for the operator';

COMMENT ON COLUMN WY106_VALIDATION_OPERATOR.RESOURCE_ID IS 'the resource to use for the operator''s label';

COMMENT ON COLUMN WY106_VALIDATION_OPERATOR.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY106_VALIDATION_OPERATOR.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY106_VALIDATION_OPERATOR.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY106_VALIDATION_OPERATOR.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY106_VALIDATION_OPERATOR.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY106_VALIDATION_OPERATOR.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY106_PK ON WY106_VALIDATION_OPERATOR
(VALIDATION_OPERATOR_CD   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY106_VALIDATION_OPERATOR
	ADD CONSTRAINT  WY106_PK PRIMARY KEY (VALIDATION_OPERATOR_CD,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY106_VALIDATION_OPERATOR
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY106_VALIDATION_OPERATOR
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY107_FIELD_SET
(
	FIELD_SET_ID         NUMBER(10) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	RESOURCE_ID          NUMBER(10) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE WY107_FIELD_SET IS 'a collection of allowed values for a field';

COMMENT ON COLUMN WY107_FIELD_SET.FIELD_SET_ID IS 'a unique system generated identifier for the field set';

COMMENT ON COLUMN WY107_FIELD_SET.RESOURCE_ID IS 'resource to be used for the optional name of the field set';

COMMENT ON COLUMN WY107_FIELD_SET.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY107_FIELD_SET.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY107_FIELD_SET.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY107_FIELD_SET.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY107_FIELD_SET.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY107_FIELD_SET.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY107_PK ON WY107_FIELD_SET
(FIELD_SET_ID   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY107_FIELD_SET
	ADD CONSTRAINT  WY107_PK PRIMARY KEY (FIELD_SET_ID,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY107_FIELD_SET
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY107_FIELD_SET
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE WY108_FIELD_SET_VALUE
(
	FIELD_SET_ID         NUMBER(10) NOT NULL ,
	FIELD_SET_VALUE_CD   VARCHAR2(20) NOT NULL ,
	EFFECTIVE_AS_OF_DTE  TIMESTAMP NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL ,
	DISPLAY_SRT          NUMBER(3) NOT NULL 
);

COMMENT ON TABLE WY108_FIELD_SET_VALUE IS 'an entry for a given field set';

COMMENT ON COLUMN WY108_FIELD_SET_VALUE.FIELD_SET_ID IS 'the field set the value is for';

COMMENT ON COLUMN WY108_FIELD_SET_VALUE.FIELD_SET_VALUE_CD IS 'the key for the value';

COMMENT ON COLUMN WY108_FIELD_SET_VALUE.RESOURCE_ID IS 'resource to use as the label for the value';

COMMENT ON COLUMN WY108_FIELD_SET_VALUE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN WY108_FIELD_SET_VALUE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN WY108_FIELD_SET_VALUE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN WY108_FIELD_SET_VALUE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN WY108_FIELD_SET_VALUE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN WY108_FIELD_SET_VALUE.EFFECTIVE_AS_OF_DTE IS 'The date and time in which the data is effective as of';

CREATE UNIQUE INDEX WY108_PK ON WY108_FIELD_SET_VALUE
(FIELD_SET_ID   ASC,FIELD_SET_VALUE_CD   ASC,EFFECTIVE_AS_OF_DTE   ASC);

ALTER TABLE WY108_FIELD_SET_VALUE
	ADD CONSTRAINT  WY108_PK PRIMARY KEY (FIELD_SET_ID,FIELD_SET_VALUE_CD,EFFECTIVE_AS_OF_DTE);

ALTER TABLE WY108_FIELD_SET_VALUE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE WY108_FIELD_SET_VALUE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE TABLE YY000_USER
(
	USER_ID              NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY000_USER IS 'contains the users that are using the api';

COMMENT ON COLUMN YY000_USER.USER_ID IS 'a unique system generated identifier for the user';

COMMENT ON COLUMN YY000_USER.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN YY000_USER.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY000_USER.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY000_USER.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY000_USER.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.';

CREATE UNIQUE INDEX YY000_PK ON YY000_USER
(USER_ID   ASC);

ALTER TABLE YY000_USER
	ADD CONSTRAINT  YY000_PK PRIMARY KEY (USER_ID);

ALTER TABLE YY000_USER
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY000_USER
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY000_IF1 ON YY000_USER
(USER_CREATED_ID   ASC);

CREATE INDEX YY000_IF2 ON YY000_USER
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY001_PROGRAM
(
	PROGRAM_ID           NUMBER(10) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY001_PROGRAM IS 'application connecting to the forms api';

COMMENT ON COLUMN YY001_PROGRAM.PROGRAM_ID IS 'Unique system generated identifier for the program';

COMMENT ON COLUMN YY001_PROGRAM.RESOURCE_ID IS 'The resource to be used for the forms label';

COMMENT ON COLUMN YY001_PROGRAM.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY001_PROGRAM.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY001_PROGRAM.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY001_PROGRAM.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY001_PROGRAM.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY001_PK ON YY001_PROGRAM
(PROGRAM_ID   ASC);

ALTER TABLE YY001_PROGRAM
	ADD CONSTRAINT  YY001_PK PRIMARY KEY (PROGRAM_ID);

ALTER TABLE YY001_PROGRAM
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY001_PROGRAM
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY001_IF1 ON YY001_PROGRAM
(RESOURCE_ID   ASC);

CREATE INDEX YY001_IF2 ON YY001_PROGRAM
(USER_CREATED_ID   ASC);

CREATE INDEX YY001_IF3 ON YY001_PROGRAM
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE TY002_LABEL
(
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	LANGUAGE_ID          NUMBER(10) NOT NULL ,
	LABEL_TXT            NVARCHAR2(2000) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE TY002_LABEL IS 'the label text for a given resource and language';

COMMENT ON COLUMN TY002_LABEL.RESOURCE_ID IS 'The resource the label is for';

COMMENT ON COLUMN TY002_LABEL.LANGUAGE_ID IS 'The language the label is for';

COMMENT ON COLUMN TY002_LABEL.LABEL_TXT IS 'the text of the label';

COMMENT ON COLUMN TY002_LABEL.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.';

COMMENT ON COLUMN TY002_LABEL.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.';

COMMENT ON COLUMN TY002_LABEL.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.';

COMMENT ON COLUMN TY002_LABEL.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN TY002_LABEL.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX TY002_PK ON TY002_LABEL
(RESOURCE_ID   ASC,LANGUAGE_ID   ASC);

ALTER TABLE TY002_LABEL
	ADD CONSTRAINT  TY002_PK PRIMARY KEY (RESOURCE_ID,LANGUAGE_ID);

ALTER TABLE TY002_LABEL
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE TY002_LABEL
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX TY002_IF1 ON TY002_LABEL
(RESOURCE_ID   ASC);

CREATE INDEX TY002_IF2 ON TY002_LABEL
(LANGUAGE_ID   ASC);

CREATE INDEX TY002_IF3 ON TY002_LABEL
(USER_CREATED_ID   ASC);

CREATE INDEX TY002_IF4 ON TY002_LABEL
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY002_TIME_WINDOW
(
	TIME_WINDOW_ID       NUMBER(10) NOT NULL ,
	DATE_START_DTE       DATE NOT NULL ,
	DATE_END_DTE         DATE NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY002_TIME_WINDOW IS 'defines a window in time with a start end end date';

COMMENT ON COLUMN YY002_TIME_WINDOW.TIME_WINDOW_ID IS 'the unique system generated identifier for the time window';

COMMENT ON COLUMN YY002_TIME_WINDOW.DATE_START_DTE IS 'the start date of the time window';

COMMENT ON COLUMN YY002_TIME_WINDOW.DATE_END_DTE IS 'the end date of the time window';

COMMENT ON COLUMN YY002_TIME_WINDOW.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY002_TIME_WINDOW.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY002_TIME_WINDOW.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY002_TIME_WINDOW.USER_CREATED_ID IS 'a unique system generated identifier for the user';

COMMENT ON COLUMN YY002_TIME_WINDOW.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY002_PK ON YY002_TIME_WINDOW
(TIME_WINDOW_ID   ASC);

ALTER TABLE YY002_TIME_WINDOW
	ADD CONSTRAINT  YY002_PK PRIMARY KEY (TIME_WINDOW_ID);

ALTER TABLE YY002_TIME_WINDOW
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY002_TIME_WINDOW
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY002_IF1 ON YY002_TIME_WINDOW
(USER_CREATED_ID   ASC);

CREATE INDEX YY002_IF2 ON YY002_TIME_WINDOW
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY003_FORM
(
	FORM_ID              NUMBER(10) NOT NULL ,
	PROGRAM_ID           NUMBER(10) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	ACTIVE_TIME_WINDOW_ID NUMBER(10) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY003_FORM IS 'stores a collection of sections and fields that together create a full form';

COMMENT ON COLUMN YY003_FORM.FORM_ID IS 'unique system generated identifier for the form';

COMMENT ON COLUMN YY003_FORM.PROGRAM_ID IS 'the program the form is for';

COMMENT ON COLUMN YY003_FORM.RESOURCE_ID IS 'the resouce to be used for the forms label';

COMMENT ON COLUMN YY003_FORM.ACTIVE_TIME_WINDOW_ID IS 'the time window the form is active for';

COMMENT ON COLUMN YY003_FORM.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY003_FORM.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY003_FORM.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY003_FORM.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY003_FORM.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY003_PK ON YY003_FORM
(FORM_ID   ASC);

ALTER TABLE YY003_FORM
	ADD CONSTRAINT  YY003_PK PRIMARY KEY (FORM_ID);

ALTER TABLE YY003_FORM
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY003_FORM
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY003_IF1 ON YY003_FORM
(PROGRAM_ID   ASC);

CREATE INDEX YY003_IF2 ON YY003_FORM
(RESOURCE_ID   ASC);

CREATE INDEX YY003_IF3 ON YY003_FORM
(ACTIVE_TIME_WINDOW_ID   ASC);

CREATE INDEX YY003_IF4 ON YY003_FORM
(USER_CREATED_ID   ASC);

CREATE INDEX YY003_IF5 ON YY003_FORM
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY004_SECTION
(
	SECTION_ID           NUMBER(10) NOT NULL ,
	FORM_ID              NUMBER(10) NOT NULL ,
	DISPLAY_SRT          NUMBER(3) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	SECTION_CD           VARCHAR2(20) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY004_SECTION IS 'contains the individual pages of a given form';

COMMENT ON COLUMN YY004_SECTION.SECTION_ID IS 'the unique system generated identifier for the section';

COMMENT ON COLUMN YY004_SECTION.FORM_ID IS 'unique system generated identifier for the form';

COMMENT ON COLUMN YY004_SECTION.DISPLAY_SRT IS 'the workflow''s position within the form';

COMMENT ON COLUMN YY004_SECTION.RESOURCE_ID IS 'the resource to be used for the workflow''s label';

COMMENT ON COLUMN YY004_SECTION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY004_SECTION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY004_SECTION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY004_SECTION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY004_SECTION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN YY004_SECTION.SECTION_CD IS 'provides a meaningful key for the section';

CREATE UNIQUE INDEX YY004_PK ON YY004_SECTION
(SECTION_ID   ASC);

ALTER TABLE YY004_SECTION
	ADD CONSTRAINT  YY004_PK PRIMARY KEY (SECTION_ID);

CREATE UNIQUE INDEX YY004_AK1 ON YY004_SECTION
(FORM_ID   ASC,SECTION_CD   ASC);

ALTER TABLE YY004_SECTION
ADD CONSTRAINT  YY004_AK1 UNIQUE (FORM_ID,SECTION_CD);

ALTER TABLE YY004_SECTION
	MODIFY DISPLAY_SRT DEFAULT 0;

ALTER TABLE YY004_SECTION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY004_SECTION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY004_IF1 ON YY004_SECTION
(FORM_ID   ASC);

CREATE INDEX YY004_IF2 ON YY004_SECTION
(RESOURCE_ID   ASC);

CREATE INDEX YY004_IF3 ON YY004_SECTION
(USER_CREATED_ID   ASC);

CREATE INDEX YY004_IF4 ON YY004_SECTION
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY005_FIELD
(
	FIELD_ID             NUMBER(10) NOT NULL ,
	FIELD_TYPE_CD        VARCHAR2(20) NOT NULL ,
	RESOURCE_ID          NUMBER(10) NOT NULL ,
	FIELD_SET_ID         NUMBER(10) NULL ,
	CSS_CLASSES_TXT      VARCHAR2(250) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY005_FIELD IS 'stores the definition for a form''s field';

COMMENT ON COLUMN YY005_FIELD.FIELD_ID IS 'A unique system generated identifier for the field';

COMMENT ON COLUMN YY005_FIELD.FIELD_TYPE_CD IS 'the type of field the field is';

COMMENT ON COLUMN YY005_FIELD.RESOURCE_ID IS 'the resource to use for the label of the field';

COMMENT ON COLUMN YY005_FIELD.FIELD_SET_ID IS 'Optional set of permitted values for the field';

COMMENT ON COLUMN YY005_FIELD.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY005_FIELD.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY005_FIELD.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY005_FIELD.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY005_FIELD.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN YY005_FIELD.CSS_CLASSES_TXT IS 'Optional list of CSS classes that apply to the field.';

CREATE UNIQUE INDEX YY005_PK ON YY005_FIELD
(FIELD_ID   ASC);

ALTER TABLE YY005_FIELD
	ADD CONSTRAINT  YY005_PK PRIMARY KEY (FIELD_ID);

CREATE UNIQUE INDEX YY005_AK1 ON YY005_FIELD
(FIELD_ID   ASC,FIELD_SET_ID   ASC);

ALTER TABLE YY005_FIELD
ADD CONSTRAINT  YY005_AK1 UNIQUE (FIELD_ID,FIELD_SET_ID);

ALTER TABLE YY005_FIELD
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY005_FIELD
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY005_IF1 ON YY005_FIELD
(FIELD_TYPE_CD   ASC);

CREATE INDEX YY005_IF2 ON YY005_FIELD
(RESOURCE_ID   ASC);

CREATE INDEX YY005_IF3 ON YY005_FIELD
(FIELD_SET_ID   ASC);

CREATE INDEX YY005_IF4 ON YY005_FIELD
(USER_CREATED_ID   ASC);

CREATE INDEX YY005_IF5 ON YY005_FIELD
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY006_VALIDATION
(
	VALIDATION_ID        NUMBER(10) NOT NULL ,
	ADMIN_RESOURCE_ID    NUMBER(10) NOT NULL ,
	ERROR_RESOURCE_ID    NUMBER(10) NOT NULL ,
	ERROR_MESSAGE_RESOURCE_ID NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY006_VALIDATION IS 'contains the definition for how to validate a field';

COMMENT ON COLUMN YY006_VALIDATION.VALIDATION_ID IS 'The unique system generated identifier for the validation';

COMMENT ON COLUMN YY006_VALIDATION.ADMIN_RESOURCE_ID IS 'the resource to be used for the label shown to admins';

COMMENT ON COLUMN YY006_VALIDATION.ERROR_RESOURCE_ID IS 'the resource to be used for the short description of the error';

COMMENT ON COLUMN YY006_VALIDATION.ERROR_MESSAGE_RESOURCE_ID IS 'the resource to be used for long description of the error';

COMMENT ON COLUMN YY006_VALIDATION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY006_VALIDATION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY006_VALIDATION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY006_VALIDATION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY006_VALIDATION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY006_PK ON YY006_VALIDATION
(VALIDATION_ID   ASC);

ALTER TABLE YY006_VALIDATION
	ADD CONSTRAINT  YY006_PK PRIMARY KEY (VALIDATION_ID);

ALTER TABLE YY006_VALIDATION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY006_VALIDATION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY006_IF1 ON YY006_VALIDATION
(ADMIN_RESOURCE_ID   ASC);

CREATE INDEX YY006_IF2 ON YY006_VALIDATION
(ERROR_RESOURCE_ID   ASC);

CREATE INDEX YY006_IF3 ON YY006_VALIDATION
(ERROR_MESSAGE_RESOURCE_ID   ASC);

CREATE INDEX YY006_IF4 ON YY006_VALIDATION
(USER_CREATED_ID   ASC);

CREATE INDEX YY006_IF5 ON YY006_VALIDATION
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY007_VALIDATION_RULE
(
	VALIDATION_RULE_ID   NUMBER(10) NOT NULL ,
	VALIDATION_ID        NUMBER(10) NOT NULL ,
	VALIDATION_ATTRIBUTE_CD VARCHAR2(20) NOT NULL ,
	VALIDATION_OPERATOR_CD VARCHAR2(20) NOT NULL ,
	VALUE_TXT            VARCHAR2(250) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY007_VALIDATION_RULE IS 'contains the definitions for the indidual rules of the validation';

COMMENT ON COLUMN YY007_VALIDATION_RULE.VALIDATION_RULE_ID IS 'the unique system generated identifier for the validation rule';

COMMENT ON COLUMN YY007_VALIDATION_RULE.VALIDATION_ID IS 'the validation the rule is for';

COMMENT ON COLUMN YY007_VALIDATION_RULE.VALIDATION_ATTRIBUTE_CD IS 'the attribute to provide validation on';

COMMENT ON COLUMN YY007_VALIDATION_RULE.VALIDATION_OPERATOR_CD IS 'the operator to use for the validation';

COMMENT ON COLUMN YY007_VALIDATION_RULE.VALUE_TXT IS 'The value to validate with';

COMMENT ON COLUMN YY007_VALIDATION_RULE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY007_VALIDATION_RULE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY007_VALIDATION_RULE.DATE_DELETED_DTE IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY007_VALIDATION_RULE.USER_CREATED_ID IS 'a unique system generated identifier for the user';

COMMENT ON COLUMN YY007_VALIDATION_RULE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY007_PK ON YY007_VALIDATION_RULE
(VALIDATION_RULE_ID   ASC);

ALTER TABLE YY007_VALIDATION_RULE
	ADD CONSTRAINT  YY007_PK PRIMARY KEY (VALIDATION_RULE_ID);

ALTER TABLE YY007_VALIDATION_RULE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY007_VALIDATION_RULE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY007_IF1 ON YY007_VALIDATION_RULE
(VALIDATION_ID   ASC);

CREATE INDEX YY007_IF2 ON YY007_VALIDATION_RULE
(VALIDATION_ATTRIBUTE_CD   ASC);

CREATE INDEX YY007_IF3 ON YY007_VALIDATION_RULE
(VALIDATION_OPERATOR_CD   ASC);

CREATE INDEX YY007_IF4 ON YY007_VALIDATION_RULE
(USER_CREATED_ID   ASC);

CREATE INDEX YY007_IF5 ON YY007_VALIDATION_RULE
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY008_XREF_FIELD_VALIDATION
(
	FIELD_ID             NUMBER(10) NOT NULL ,
	VALIDATION_ID        NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY008_XREF_FIELD_VALIDATION IS 'defines which validations to use for a given field';

COMMENT ON COLUMN YY008_XREF_FIELD_VALIDATION.FIELD_ID IS 'A unique system generated identifier for the field';

COMMENT ON COLUMN YY008_XREF_FIELD_VALIDATION.VALIDATION_ID IS 'The unique system generated identifier for the validation';

COMMENT ON COLUMN YY008_XREF_FIELD_VALIDATION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY008_XREF_FIELD_VALIDATION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY008_XREF_FIELD_VALIDATION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY008_XREF_FIELD_VALIDATION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY008_XREF_FIELD_VALIDATION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY008_PK ON YY008_XREF_FIELD_VALIDATION
(FIELD_ID   ASC,VALIDATION_ID   ASC);

ALTER TABLE YY008_XREF_FIELD_VALIDATION
	ADD CONSTRAINT  YY008_PK PRIMARY KEY (FIELD_ID,VALIDATION_ID);

ALTER TABLE YY008_XREF_FIELD_VALIDATION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY008_XREF_FIELD_VALIDATION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY008_IF1 ON YY008_XREF_FIELD_VALIDATION
(FIELD_ID   ASC);

CREATE INDEX YY008_IF2 ON YY008_XREF_FIELD_VALIDATION
(VALIDATION_ID   ASC);

CREATE INDEX YY008_IF3 ON YY008_XREF_FIELD_VALIDATION
(USER_CREATED_ID   ASC);

CREATE INDEX YY008_IF4 ON YY008_XREF_FIELD_VALIDATION
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY009_SECTION_FIELD
(
	SECTION_ID           NUMBER(10) NOT NULL ,
	FIELD_ID             NUMBER(10) NOT NULL ,
	DISPLAY_SRT          NUMBER(3) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY009_SECTION_FIELD IS 'contains the list of fields and their ordering for a section';

COMMENT ON COLUMN YY009_SECTION_FIELD.SECTION_ID IS 'the unique system generated identifier for the section';

COMMENT ON COLUMN YY009_SECTION_FIELD.FIELD_ID IS 'A unique system generated identifier for the field';

COMMENT ON COLUMN YY009_SECTION_FIELD.DISPLAY_SRT IS 'the order the field should display in the section';

COMMENT ON COLUMN YY009_SECTION_FIELD.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY009_SECTION_FIELD.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY009_SECTION_FIELD.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY009_SECTION_FIELD.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY009_SECTION_FIELD.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY009_PK ON YY009_SECTION_FIELD
(SECTION_ID   ASC,FIELD_ID   ASC);

ALTER TABLE YY009_SECTION_FIELD
	ADD CONSTRAINT  YY009_PK PRIMARY KEY (SECTION_ID,FIELD_ID);

ALTER TABLE YY009_SECTION_FIELD
	MODIFY DISPLAY_SRT DEFAULT 0;

ALTER TABLE YY009_SECTION_FIELD
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY009_SECTION_FIELD
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY009_IF1 ON YY009_SECTION_FIELD
(SECTION_ID   ASC);

CREATE INDEX YY009_IF2 ON YY009_SECTION_FIELD
(FIELD_ID   ASC);

CREATE INDEX YY009_IF3 ON YY009_SECTION_FIELD
(USER_CREATED_ID   ASC);

CREATE INDEX YY009_IF4 ON YY009_SECTION_FIELD
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY010_DOCUMENT
(
	DOCUMENT_ID          NUMBER(10) NOT NULL ,
	FILE_NAME_NM         VARCHAR2(50) NOT NULL ,
	DOCUMENT_DATA_ID     NUMBER(10) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY010_DOCUMENT IS 'stores uploaded documents in the system';

COMMENT ON COLUMN YY010_DOCUMENT.DOCUMENT_ID IS 'a unique system generated id for the document';

COMMENT ON COLUMN YY010_DOCUMENT.FILE_NAME_NM IS 'the file name of the document';

COMMENT ON COLUMN YY010_DOCUMENT.DOCUMENT_DATA_ID IS 'the data for the document';

COMMENT ON COLUMN YY010_DOCUMENT.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY010_DOCUMENT.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY010_DOCUMENT.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY010_DOCUMENT.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY010_DOCUMENT.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY010_PK ON YY010_DOCUMENT
(DOCUMENT_ID   ASC);

ALTER TABLE YY010_DOCUMENT
	ADD CONSTRAINT  YY010_PK PRIMARY KEY (DOCUMENT_ID);

ALTER TABLE YY010_DOCUMENT
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY010_DOCUMENT
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY010_IF1 ON YY010_DOCUMENT
(DOCUMENT_DATA_ID   ASC);

CREATE INDEX YY010_IF2 ON YY010_DOCUMENT
(USER_CREATED_ID   ASC);

CREATE INDEX YY010_IF3 ON YY010_DOCUMENT
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY011_DOCUMENT_DATA
(
	DOCUMENT_DATA_ID     NUMBER(10) NOT NULL ,
	DATA_LOB             BLOB NOT NULL ,
	SHA256_CHECKSUM_LOB  RAW(64) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY011_DOCUMENT_DATA IS 'contains the binary data of documents';

COMMENT ON COLUMN YY011_DOCUMENT_DATA.DOCUMENT_DATA_ID IS 'a unique system generated identifier for the document data';

COMMENT ON COLUMN YY011_DOCUMENT_DATA.DATA_LOB IS 'the document data binary content';

COMMENT ON COLUMN YY011_DOCUMENT_DATA.SHA256_CHECKSUM_LOB IS 'the SHA 256 checksum of the document content';

COMMENT ON COLUMN YY011_DOCUMENT_DATA.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY011_DOCUMENT_DATA.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY011_DOCUMENT_DATA.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY011_DOCUMENT_DATA.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY011_DOCUMENT_DATA.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY011_PK ON YY011_DOCUMENT_DATA
(DOCUMENT_DATA_ID   ASC);

ALTER TABLE YY011_DOCUMENT_DATA
	ADD CONSTRAINT  YY011_PK PRIMARY KEY (DOCUMENT_DATA_ID);

ALTER TABLE YY011_DOCUMENT_DATA
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY011_DOCUMENT_DATA
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY011_IF1 ON YY011_DOCUMENT_DATA
(USER_CREATED_ID   ASC);

CREATE INDEX YY011_IF2 ON YY011_DOCUMENT_DATA
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY014_SUBMISSION
(
	SUBMISSION_ID        NUMBER(10) NOT NULL ,
	FORM_ID              NUMBER(10) NOT NULL ,
	USER_ID              NUMBER(10) NOT NULL ,
	COMPLETE_IND         NUMBER(1) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY014_SUBMISSION IS 'contains a user''s response to a form';

COMMENT ON COLUMN YY014_SUBMISSION.SUBMISSION_ID IS 'the unique system generated id for the submission';

COMMENT ON COLUMN YY014_SUBMISSION.FORM_ID IS 'the form the submission is for';

COMMENT ON COLUMN YY014_SUBMISSION.USER_ID IS 'the user the submission is for';

COMMENT ON COLUMN YY014_SUBMISSION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN YY014_SUBMISSION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY014_SUBMISSION.COMPLETE_IND IS 'indicates if the submission is complete';

COMMENT ON COLUMN YY014_SUBMISSION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY014_SUBMISSION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY014_SUBMISSION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

CREATE UNIQUE INDEX YY014_PK ON YY014_SUBMISSION
(SUBMISSION_ID   ASC);

ALTER TABLE YY014_SUBMISSION
	ADD CONSTRAINT  YY014_PK PRIMARY KEY (SUBMISSION_ID);

ALTER TABLE YY014_SUBMISSION
	MODIFY COMPLETE_IND CONSTRAINT  VALID_INDICATOR_616208842 CHECK (COMPLETE_IND IN (0, 1));

ALTER TABLE YY014_SUBMISSION
	MODIFY COMPLETE_IND DEFAULT 0;

ALTER TABLE YY014_SUBMISSION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY014_SUBMISSION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY014_IF1 ON YY014_SUBMISSION
(FORM_ID   ASC);

CREATE INDEX YY014_IF2 ON YY014_SUBMISSION
(USER_ID   ASC);

CREATE INDEX YY014_IF3 ON YY014_SUBMISSION
(USER_CREATED_ID   ASC);

CREATE INDEX YY014_IF4 ON YY014_SUBMISSION
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY015_SUBMISSION_SECTION
(
	SUBMISSION_ID        NUMBER(10) NOT NULL ,
	SECTION_ID           NUMBER(10) NOT NULL ,
	COMPLETE_IND         NUMBER(1) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY015_SUBMISSION_SECTION IS 'stores if a section has been fully completed for a submisison';

COMMENT ON COLUMN YY015_SUBMISSION_SECTION.SUBMISSION_ID IS 'the unique system generated id for the submission';

COMMENT ON COLUMN YY015_SUBMISSION_SECTION.SECTION_ID IS 'the unique system generated identifier for the section';

COMMENT ON COLUMN YY015_SUBMISSION_SECTION.COMPLETE_IND IS 'indicates if the section has been completed';

COMMENT ON COLUMN YY015_SUBMISSION_SECTION.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY015_SUBMISSION_SECTION.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY015_SUBMISSION_SECTION.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY015_SUBMISSION_SECTION.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY015_SUBMISSION_SECTION.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY015_PK ON YY015_SUBMISSION_SECTION
(SUBMISSION_ID   ASC,SECTION_ID   ASC);

ALTER TABLE YY015_SUBMISSION_SECTION
	ADD CONSTRAINT  YY015_PK PRIMARY KEY (SUBMISSION_ID,SECTION_ID);

ALTER TABLE YY015_SUBMISSION_SECTION
	MODIFY COMPLETE_IND CONSTRAINT  VALID_INDICATOR_1828324043 CHECK (COMPLETE_IND IN (0, 1));

ALTER TABLE YY015_SUBMISSION_SECTION
	MODIFY COMPLETE_IND DEFAULT 0;

ALTER TABLE YY015_SUBMISSION_SECTION
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY015_SUBMISSION_SECTION
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY015_IF1 ON YY015_SUBMISSION_SECTION
(SUBMISSION_ID   ASC);

CREATE INDEX YY015_IF2 ON YY015_SUBMISSION_SECTION
(SECTION_ID   ASC);

CREATE INDEX YY015_IF3 ON YY015_SUBMISSION_SECTION
(USER_CREATED_ID   ASC);

CREATE INDEX YY015_IF4 ON YY015_SUBMISSION_SECTION
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY012_FIELD_RESPONSE
(
	SUBMISSION_ID        NUMBER(10) NOT NULL ,
	SECTION_ID           NUMBER(10) NOT NULL ,
	FIELD_ID             NUMBER(10) NOT NULL ,
	FIELD_RESPONSE_TXT   NVARCHAR2(2000) NULL ,
	DOCUMENT_ID          NUMBER(10) NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY012_FIELD_RESPONSE IS 'stores the response a user made for a given field';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.FIELD_RESPONSE_TXT IS 'the text value of the response';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.DOCUMENT_ID IS 'the document attached to the response';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.SUBMISSION_ID IS 'the unique system generated id for the submission';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.SECTION_ID IS 'the unique system generated identifier for the section';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.FIELD_ID IS 'A unique system generated identifier for the field';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY012_FIELD_RESPONSE.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY012_PK ON YY012_FIELD_RESPONSE
(SUBMISSION_ID   ASC,SECTION_ID   ASC,FIELD_ID   ASC);

ALTER TABLE YY012_FIELD_RESPONSE
	ADD CONSTRAINT  YY012_PK PRIMARY KEY (SUBMISSION_ID,SECTION_ID,FIELD_ID);

ALTER TABLE YY012_FIELD_RESPONSE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY012_FIELD_RESPONSE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY012_IF2 ON YY012_FIELD_RESPONSE
(DOCUMENT_ID   ASC);

CREATE INDEX YY012_IF3 ON YY012_FIELD_RESPONSE
(SUBMISSION_ID   ASC,SECTION_ID   ASC);

CREATE INDEX YY012_IF4 ON YY012_FIELD_RESPONSE
(FIELD_ID   ASC);

CREATE INDEX YY012_IF5 ON YY012_FIELD_RESPONSE
(USER_CREATED_ID   ASC);

CREATE INDEX YY012_IF6 ON YY012_FIELD_RESPONSE
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY013_XREF_USER_PROGRAM
(
	PROGRAM_ID           NUMBER(10) NOT NULL ,
	USER_ID              NUMBER(10) NOT NULL ,
	INDENTIFIER_TXT      VARCHAR2(255) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY013_XREF_USER_PROGRAM IS 'the list of programs a user can access';

COMMENT ON COLUMN YY013_XREF_USER_PROGRAM.PROGRAM_ID IS 'Unique system generated identifier for the program';

COMMENT ON COLUMN YY013_XREF_USER_PROGRAM.USER_ID IS 'a unique system generated identifier for the user';

COMMENT ON COLUMN YY013_XREF_USER_PROGRAM.INDENTIFIER_TXT IS 'a unique per-program identifier that indentifies which user is accessing the system';

COMMENT ON COLUMN YY013_XREF_USER_PROGRAM.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY013_XREF_USER_PROGRAM.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY013_XREF_USER_PROGRAM.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY013_XREF_USER_PROGRAM.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY013_XREF_USER_PROGRAM.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

CREATE UNIQUE INDEX YY013_PK ON YY013_XREF_USER_PROGRAM
(PROGRAM_ID   ASC,USER_ID   ASC);

ALTER TABLE YY013_XREF_USER_PROGRAM
	ADD CONSTRAINT  YY013_PK PRIMARY KEY (PROGRAM_ID,USER_ID);

CREATE UNIQUE INDEX YY013_AK1 ON YY013_XREF_USER_PROGRAM
(PROGRAM_ID   ASC,INDENTIFIER_TXT   ASC);

ALTER TABLE YY013_XREF_USER_PROGRAM
ADD CONSTRAINT  YY013_AK1 UNIQUE (PROGRAM_ID,INDENTIFIER_TXT);

ALTER TABLE YY013_XREF_USER_PROGRAM
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY013_XREF_USER_PROGRAM
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY013_IF1 ON YY013_XREF_USER_PROGRAM
(PROGRAM_ID   ASC);

CREATE INDEX YY013_IF2 ON YY013_XREF_USER_PROGRAM
(USER_ID   ASC);

CREATE INDEX YY013_IF3 ON YY013_XREF_USER_PROGRAM
(USER_CREATED_ID   ASC);

CREATE INDEX YY013_IF4 ON YY013_XREF_USER_PROGRAM
(USER_LAST_UPDATE_ID   ASC);

CREATE TABLE YY016_FIELD_SET_RESPONSE
(
	SUBMISSION_ID        NUMBER(10) NOT NULL ,
	SECTION_ID           NUMBER(10) NOT NULL ,
	FIELD_ID             NUMBER(10) NOT NULL ,
	FIELD_SET_ID         NUMBER(10) NOT NULL ,
	FIELD_SET_VALUE_CD   VARCHAR2(20) NOT NULL ,
	SELECTED_IND         NUMBER(1) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(22) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(22) NULL 
);

COMMENT ON TABLE YY016_FIELD_SET_RESPONSE IS 'This table is used to keep track of selected values for checkbox fieldsets when filling out any section of the form.';

COMMENT ON COLUMN YY016_FIELD_SET_RESPONSE.SUBMISSION_ID IS 'the unique system generated id for the submission';

COMMENT ON COLUMN YY016_FIELD_SET_RESPONSE.SECTION_ID IS 'the unique system generated identifier for the section';

COMMENT ON COLUMN YY016_FIELD_SET_RESPONSE.FIELD_ID IS 'A unique system generated identifier for the field';

COMMENT ON COLUMN YY016_FIELD_SET_RESPONSE.FIELD_SET_ID IS 'a unique system generated identifier for the field set';

COMMENT ON COLUMN YY016_FIELD_SET_RESPONSE.SELECTED_IND IS 'This will be used to determine if a checkbox has been selected.

1 = selected
0 = not selected';

COMMENT ON COLUMN YY016_FIELD_SET_RESPONSE.FIELD_SET_VALUE_CD IS 'the key for the value';

COMMENT ON COLUMN YY016_FIELD_SET_RESPONSE.USER_CREATED_ID IS 'a unique system generated identifier for the user created id';

COMMENT ON COLUMN YY016_FIELD_SET_RESPONSE.USER_LAST_UPDATE_ID IS 'a unique system generated identifier for the user last update id';

CREATE UNIQUE INDEX YY016_PK ON YY016_FIELD_SET_RESPONSE
(SUBMISSION_ID   ASC,SECTION_ID   ASC,FIELD_ID   ASC,FIELD_SET_ID   ASC,FIELD_SET_VALUE_CD   ASC);

ALTER TABLE YY016_FIELD_SET_RESPONSE
	ADD CONSTRAINT  YY016_PK PRIMARY KEY (SUBMISSION_ID,SECTION_ID,FIELD_ID,FIELD_SET_ID,FIELD_SET_VALUE_CD);

ALTER TABLE YY016_FIELD_SET_RESPONSE
	MODIFY SELECTED_IND CONSTRAINT  VALID_INDICATOR_1978857920 CHECK (SELECTED_IND IN (0, 1));

ALTER TABLE YY016_FIELD_SET_RESPONSE
	MODIFY SELECTED_IND DEFAULT 0;

ALTER TABLE YY016_FIELD_SET_RESPONSE
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY016_FIELD_SET_RESPONSE
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY016_IF1 ON YY016_FIELD_SET_RESPONSE
(SUBMISSION_ID   ASC);

CREATE INDEX YY016_IF2 ON YY016_FIELD_SET_RESPONSE
(SECTION_ID   ASC);

CREATE INDEX YY016_IF4 ON YY016_FIELD_SET_RESPONSE
(FIELD_SET_ID   ASC);

CREATE INDEX YY016_IF5 ON YY016_FIELD_SET_RESPONSE
(FIELD_SET_ID   ASC,FIELD_SET_VALUE_CD   ASC);

CREATE INDEX YY016_IF6 ON YY016_FIELD_SET_RESPONSE
(USER_CREATED_ID   ASC);

CREATE INDEX YY016_IF7 ON YY016_FIELD_SET_RESPONSE
(USER_LAST_UPDATE_ID   ASC);

CREATE INDEX YY016_IF9 ON YY016_FIELD_SET_RESPONSE
(FIELD_ID   ASC,FIELD_SET_ID   ASC);

CREATE TABLE YY017_FIELD_RELATED
(
	FIELD_SOURCE_ID      NUMBER(10) NOT NULL ,
	FIELD_TARGET_ID      NUMBER(10) NOT NULL ,
	FIELD_RELATED_CD     VARCHAR2(20) NOT NULL ,
	DATE_CREATED_DTE     DATE NOT NULL ,
	DATE_LAST_UPDATE_DTE DATE NULL ,
	DATE_DELETED_DTE     DATE NULL ,
	USER_CREATED_ID      NUMBER(10) NOT NULL ,
	USER_LAST_UPDATE_ID  NUMBER(10) NULL 
);

COMMENT ON TABLE YY017_FIELD_RELATED IS 'A table to identify a relationship between fields.';

COMMENT ON COLUMN YY017_FIELD_RELATED.DATE_CREATED_DTE IS 'Automatically populated and indicates when the record was originally saved to the database.
';

COMMENT ON COLUMN YY017_FIELD_RELATED.DATE_LAST_UPDATE_DTE IS 'Automatically populated and indicates when the record was last modified and saved to the database.
';

COMMENT ON COLUMN YY017_FIELD_RELATED.DATE_DELETED_DTE IS 'Automatically populated and indicates when the record was logically deleted in the database.
';

COMMENT ON COLUMN YY017_FIELD_RELATED.USER_CREATED_ID IS 'Indicates the user who created the record.
';

COMMENT ON COLUMN YY017_FIELD_RELATED.USER_LAST_UPDATE_ID IS 'Indicates the user who last modified the record.';

COMMENT ON COLUMN YY017_FIELD_RELATED.FIELD_RELATED_CD IS 'Stores a machine friendly name for the relationship to be used for reporting and validation';

COMMENT ON COLUMN YY017_FIELD_RELATED.FIELD_SOURCE_ID IS 'The source of the field to field relationship mapping';

COMMENT ON COLUMN YY017_FIELD_RELATED.FIELD_TARGET_ID IS 'The target field in the field to field relationship mapping';

CREATE UNIQUE INDEX YY017_PK ON YY017_FIELD_RELATED
(FIELD_SOURCE_ID   ASC,FIELD_TARGET_ID   ASC);

ALTER TABLE YY017_FIELD_RELATED
	ADD CONSTRAINT  YY017_PK PRIMARY KEY (FIELD_SOURCE_ID,FIELD_TARGET_ID);

CREATE UNIQUE INDEX YY017_AK1 ON YY017_FIELD_RELATED
(FIELD_RELATED_CD   ASC);

ALTER TABLE YY017_FIELD_RELATED
ADD CONSTRAINT  YY017_AK1 UNIQUE (FIELD_RELATED_CD);

ALTER TABLE YY017_FIELD_RELATED
	MODIFY DATE_CREATED_DTE DEFAULT SYSDATE;

ALTER TABLE YY017_FIELD_RELATED
	MODIFY DATE_LAST_UPDATE_DTE DEFAULT SYSDATE;

CREATE INDEX YY017_IF1 ON YY017_FIELD_RELATED
(USER_CREATED_ID   ASC);

CREATE INDEX YY017_IF2 ON YY017_FIELD_RELATED
(USER_LAST_UPDATE_ID   ASC);

CREATE INDEX YY017_IF3 ON YY017_FIELD_RELATED
(FIELD_SOURCE_ID   ASC);

CREATE INDEX YY017_IF4 ON YY017_FIELD_RELATED
(FIELD_TARGET_ID   ASC);

ALTER TABLE TY001_LANGUAGE
	ADD (CONSTRAINT TY001_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE TY001_LANGUAGE
	ADD (CONSTRAINT TY001_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE TY003_RESOURCE
	ADD (CONSTRAINT TY003_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE TY003_RESOURCE
	ADD (CONSTRAINT TY003_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE TY004_FIELD_TYPE
	ADD (CONSTRAINT TY004_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE TY004_FIELD_TYPE
	ADD (CONSTRAINT TY004_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE TY004_FIELD_TYPE
	ADD (CONSTRAINT TY004_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE TY005_VALIDATION_ATTRIBUTE
	ADD (CONSTRAINT TY005_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE TY005_VALIDATION_ATTRIBUTE
	ADD (CONSTRAINT TY005_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE TY005_VALIDATION_ATTRIBUTE
	ADD (CONSTRAINT TY005_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE TY006_VALIDATION_OPERATOR
	ADD (CONSTRAINT TY006_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE TY006_VALIDATION_OPERATOR
	ADD (CONSTRAINT TY006_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE TY006_VALIDATION_OPERATOR
	ADD (CONSTRAINT TY006_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE TY007_FIELD_SET
	ADD (CONSTRAINT TY007_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE TY007_FIELD_SET
	ADD (CONSTRAINT TY007_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE TY007_FIELD_SET
	ADD (CONSTRAINT TY007_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE TY008_FIELD_SET_VALUE
	ADD (CONSTRAINT TY008_TY007_FK FOREIGN KEY (FIELD_SET_ID) REFERENCES TY007_FIELD_SET (FIELD_SET_ID));

ALTER TABLE TY008_FIELD_SET_VALUE
	ADD (CONSTRAINT TY008_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE TY008_FIELD_SET_VALUE
	ADD (CONSTRAINT TY008_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE TY008_FIELD_SET_VALUE
	ADD (CONSTRAINT TY008_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY000_USER
	ADD (CONSTRAINT YY000_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY000_USER
	ADD (CONSTRAINT YY000_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY001_PROGRAM
	ADD (CONSTRAINT YY001_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE YY001_PROGRAM
	ADD (CONSTRAINT YY001_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY001_PROGRAM
	ADD (CONSTRAINT YY001_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE TY002_LABEL
	ADD (CONSTRAINT TY002_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE TY002_LABEL
	ADD (CONSTRAINT TY002_TY001_FK FOREIGN KEY (LANGUAGE_ID) REFERENCES TY001_LANGUAGE (LANGUAGE_ID));

ALTER TABLE TY002_LABEL
	ADD (CONSTRAINT TY002_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE TY002_LABEL
	ADD (CONSTRAINT TY002_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY002_TIME_WINDOW
	ADD (CONSTRAINT YY002_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY002_TIME_WINDOW
	ADD (CONSTRAINT YY002_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY003_FORM
	ADD (CONSTRAINT YY003_YY001_FK FOREIGN KEY (PROGRAM_ID) REFERENCES YY001_PROGRAM (PROGRAM_ID));

ALTER TABLE YY003_FORM
	ADD (CONSTRAINT YY003_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE YY003_FORM
	ADD (CONSTRAINT YY003_YY002_FK FOREIGN KEY (ACTIVE_TIME_WINDOW_ID) REFERENCES YY002_TIME_WINDOW (TIME_WINDOW_ID) ON DELETE SET NULL);

ALTER TABLE YY003_FORM
	ADD (CONSTRAINT YY003_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY003_FORM
	ADD (CONSTRAINT YY003_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY004_SECTION
	ADD (CONSTRAINT YY004_YY003_FK FOREIGN KEY (FORM_ID) REFERENCES YY003_FORM (FORM_ID));

ALTER TABLE YY004_SECTION
	ADD (CONSTRAINT YY004_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE YY004_SECTION
	ADD (CONSTRAINT YY004_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY004_SECTION
	ADD (CONSTRAINT YY004_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY005_FIELD
	ADD (CONSTRAINT YY005_TY004_FK FOREIGN KEY (FIELD_TYPE_CD) REFERENCES TY004_FIELD_TYPE (FIELD_TYPE_CD));

ALTER TABLE YY005_FIELD
	ADD (CONSTRAINT YY005_TY003_FK FOREIGN KEY (RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE YY005_FIELD
	ADD (CONSTRAINT YY005_TY007_FK FOREIGN KEY (FIELD_SET_ID) REFERENCES TY007_FIELD_SET (FIELD_SET_ID) ON DELETE SET NULL);

ALTER TABLE YY005_FIELD
	ADD (CONSTRAINT YY005_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY005_FIELD
	ADD (CONSTRAINT YY005_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY006_VALIDATION
	ADD (CONSTRAINT YY006_TY003_FK1 FOREIGN KEY (ADMIN_RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE YY006_VALIDATION
	ADD (CONSTRAINT YY006_TY003_FK2 FOREIGN KEY (ERROR_RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE YY006_VALIDATION
	ADD (CONSTRAINT YY006_TY003_FK3 FOREIGN KEY (ERROR_MESSAGE_RESOURCE_ID) REFERENCES TY003_RESOURCE (RESOURCE_ID));

ALTER TABLE YY006_VALIDATION
	ADD (CONSTRAINT YY006_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY006_VALIDATION
	ADD (CONSTRAINT YY006_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY007_VALIDATION_RULE
	ADD (CONSTRAINT YY007_YY006_FK FOREIGN KEY (VALIDATION_ID) REFERENCES YY006_VALIDATION (VALIDATION_ID));

ALTER TABLE YY007_VALIDATION_RULE
	ADD (CONSTRAINT YY007_TY005_FK FOREIGN KEY (VALIDATION_ATTRIBUTE_CD) REFERENCES TY005_VALIDATION_ATTRIBUTE (VALIDATION_ATTRIBUTE_CD));

ALTER TABLE YY007_VALIDATION_RULE
	ADD (CONSTRAINT YY007_TY006_FK FOREIGN KEY (VALIDATION_OPERATOR_CD) REFERENCES TY006_VALIDATION_OPERATOR (VALIDATION_OPERATOR_CD));

ALTER TABLE YY007_VALIDATION_RULE
	ADD (CONSTRAINT YY007_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY007_VALIDATION_RULE
	ADD (CONSTRAINT YY007_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY008_XREF_FIELD_VALIDATION
	ADD (CONSTRAINT YY008_YY005_FK FOREIGN KEY (FIELD_ID) REFERENCES YY005_FIELD (FIELD_ID));

ALTER TABLE YY008_XREF_FIELD_VALIDATION
	ADD (CONSTRAINT YY008_YY006_FK FOREIGN KEY (VALIDATION_ID) REFERENCES YY006_VALIDATION (VALIDATION_ID));

ALTER TABLE YY008_XREF_FIELD_VALIDATION
	ADD (CONSTRAINT YY008_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY008_XREF_FIELD_VALIDATION
	ADD (CONSTRAINT YY008_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY009_SECTION_FIELD
	ADD (CONSTRAINT YY009_YY004_FK FOREIGN KEY (SECTION_ID) REFERENCES YY004_SECTION (SECTION_ID));

ALTER TABLE YY009_SECTION_FIELD
	ADD (CONSTRAINT YY009_YY005_FK FOREIGN KEY (FIELD_ID) REFERENCES YY005_FIELD (FIELD_ID));

ALTER TABLE YY009_SECTION_FIELD
	ADD (CONSTRAINT YY009_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY009_SECTION_FIELD
	ADD (CONSTRAINT YY009_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY010_DOCUMENT
	ADD (CONSTRAINT YY010_YY011_FK FOREIGN KEY (DOCUMENT_DATA_ID) REFERENCES YY011_DOCUMENT_DATA (DOCUMENT_DATA_ID));

ALTER TABLE YY010_DOCUMENT
	ADD (CONSTRAINT YY010_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY010_DOCUMENT
	ADD (CONSTRAINT YY010_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY011_DOCUMENT_DATA
	ADD (CONSTRAINT YY011_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY011_DOCUMENT_DATA
	ADD (CONSTRAINT YY011_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY014_SUBMISSION
	ADD (CONSTRAINT YY014_YY003_FK FOREIGN KEY (FORM_ID) REFERENCES YY003_FORM (FORM_ID));

ALTER TABLE YY014_SUBMISSION
	ADD (CONSTRAINT YY014_YY000_FK FOREIGN KEY (USER_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY014_SUBMISSION
	ADD (CONSTRAINT YY014_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY014_SUBMISSION
	ADD (CONSTRAINT YY014_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY015_SUBMISSION_SECTION
	ADD (CONSTRAINT YY015_YY014_FK FOREIGN KEY (SUBMISSION_ID) REFERENCES YY014_SUBMISSION (SUBMISSION_ID));

ALTER TABLE YY015_SUBMISSION_SECTION
	ADD (CONSTRAINT YY015_YY004_FK FOREIGN KEY (SECTION_ID) REFERENCES YY004_SECTION (SECTION_ID));

ALTER TABLE YY015_SUBMISSION_SECTION
	ADD (CONSTRAINT YY015_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY015_SUBMISSION_SECTION
	ADD (CONSTRAINT YY015_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY012_FIELD_RESPONSE
	ADD (CONSTRAINT YY012_YY010_FK FOREIGN KEY (DOCUMENT_ID) REFERENCES YY010_DOCUMENT (DOCUMENT_ID) ON DELETE SET NULL);

ALTER TABLE YY012_FIELD_RESPONSE
	ADD (CONSTRAINT YY012_YY015_FK FOREIGN KEY (SUBMISSION_ID, SECTION_ID) REFERENCES YY015_SUBMISSION_SECTION (SUBMISSION_ID, SECTION_ID));

ALTER TABLE YY012_FIELD_RESPONSE
	ADD (CONSTRAINT YY012_YY005_FK FOREIGN KEY (FIELD_ID) REFERENCES YY005_FIELD (FIELD_ID));

ALTER TABLE YY012_FIELD_RESPONSE
	ADD (CONSTRAINT YY012_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY012_FIELD_RESPONSE
	ADD (CONSTRAINT YY012_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY013_XREF_USER_PROGRAM
	ADD (CONSTRAINT YY013_YY001_FK FOREIGN KEY (PROGRAM_ID) REFERENCES YY001_PROGRAM (PROGRAM_ID));

ALTER TABLE YY013_XREF_USER_PROGRAM
	ADD (CONSTRAINT YY013_YY000_FK FOREIGN KEY (USER_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY013_XREF_USER_PROGRAM
	ADD (CONSTRAINT YY013_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY013_XREF_USER_PROGRAM
	ADD (CONSTRAINT YY013_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY016_FIELD_SET_RESPONSE
	ADD (CONSTRAINT YY016_YY014_FK FOREIGN KEY (SUBMISSION_ID) REFERENCES YY014_SUBMISSION (SUBMISSION_ID));

ALTER TABLE YY016_FIELD_SET_RESPONSE
	ADD (CONSTRAINT YY016_YY004_FK FOREIGN KEY (SECTION_ID) REFERENCES YY004_SECTION (SECTION_ID));

ALTER TABLE YY016_FIELD_SET_RESPONSE
	ADD (CONSTRAINT YY016_TY007_FK FOREIGN KEY (FIELD_SET_ID) REFERENCES TY007_FIELD_SET (FIELD_SET_ID));

ALTER TABLE YY016_FIELD_SET_RESPONSE
	ADD (CONSTRAINT YY016_TY008_FK FOREIGN KEY (FIELD_SET_ID, FIELD_SET_VALUE_CD) REFERENCES TY008_FIELD_SET_VALUE (FIELD_SET_ID, FIELD_SET_VALUE_CD));

ALTER TABLE YY016_FIELD_SET_RESPONSE
	ADD (CONSTRAINT YY016_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY016_FIELD_SET_RESPONSE
	ADD (CONSTRAINT YY016_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY016_FIELD_SET_RESPONSE
	ADD (CONSTRAINT YY016_YY005_FK FOREIGN KEY (FIELD_ID, FIELD_SET_ID) REFERENCES YY005_FIELD (FIELD_ID, FIELD_SET_ID));

ALTER TABLE YY017_FIELD_RELATED
	ADD (CONSTRAINT YY017_YY000_CREATE_FK FOREIGN KEY (USER_CREATED_ID) REFERENCES YY000_USER (USER_ID));

ALTER TABLE YY017_FIELD_RELATED
	ADD (CONSTRAINT YY017_YY000_UPDATE_FK FOREIGN KEY (USER_LAST_UPDATE_ID) REFERENCES YY000_USER (USER_ID) ON DELETE SET NULL);

ALTER TABLE YY017_FIELD_RELATED
	ADD (CONSTRAINT YY017_YY005_SOURCE_FK FOREIGN KEY (FIELD_SOURCE_ID) REFERENCES YY005_FIELD (FIELD_ID));

ALTER TABLE YY017_FIELD_RELATED
	ADD (CONSTRAINT YY017_YY005_TARGET_FK FOREIGN KEY (FIELD_TARGET_ID) REFERENCES YY005_FIELD (FIELD_ID));

CREATE  OR REPLACE  PACKAGE NTC_UTIL 
AS

PROCEDURE RESET_SEQ (p_schema_owner varchar2,p_seq_name varchar2, p_val number default 0);
PROCEDURE RESET_SEQ_TO_DATA(p_schema_owner varchar2, p_TableName varchar2, p_FieldName varchar2, p_seq_name  varchar2);

END NTC_UTIL;
/



CREATE  OR REPLACE  PACKAGE BODY NTC_UTIL 
AS

PROCEDURE RESET_SEQ (p_schema_owner varchar2, p_seq_name  varchar2, p_val number default 0)
IS
	l_current number := 0;
  	l_difference number := 0;
  	l_minvalue all_sequences.min_value%type := 0;
  
  	v_dml clob;
BEGIN

	dbms_output.put_line('-------------------------------------------------------');
	dbms_output.put_line('-- Reset Sequence');
	dbms_output.put_line('-------------------------------------------------------');
    dbms_output.put_line('-- p_schema_owner = ' || p_schema_owner);
	dbms_output.put_line('-- p_seq_name = ' || p_seq_name);
	dbms_output.put_line('-- p_val = ' || p_val);
	dbms_output.put_line('-------------------------------------------------------');

	-- Get the min value for the sequence
	select min_value
	into l_minvalue
	from all_sequences
	where sequence_name = p_seq_name AND SEQUENCE_OWNER = p_schema_owner;
	
	dbms_output.put_line('-- l_minvalue = ' || l_minvalue);

	-- Determine the current count of the sequence
	execute immediate 'select ' || p_seq_name || '.nextval from dual' INTO l_current;

	dbms_output.put_line('-- l_current = ' || l_current);

    -- use the set val as long as it above the min value
	if p_Val < l_minvalue THEN
		l_difference := l_minvalue - l_current;
		dbms_output.put_line('-- Specified value is greater than minvalue (' || l_difference || ')' );
	else
	  l_difference := p_Val - l_current;
	 dbms_output.put_line('-- Specified value is not greater than minvalue (' || l_difference || ')' );
	end if;
	
    -- If there is no difference, skip and do nothing
	if l_difference = 0 THEN
		dbms_output.put_line('-- There is delta 0; Skip to next' );
	  	return;
	end if;

	dbms_output.put_line('-- Setting sequence number to max' );
	-- set the sequence based on the delta determined 
	execute immediate 'alter sequence ' || p_schema_owner || '.' || p_seq_name || ' increment by ' || l_difference || ' minvalue ' || l_minvalue;

	dbms_output.put_line('-- Incrementing the sequence' );
	-- set the sequence to count
	execute immediate 'select ' || p_schema_owner || '.' || p_seq_name || '.nextval from dual' INTO l_difference;

	dbms_output.put_line('-- Finalizing changes to the sequence' );
	-- finalize the changes to the sequence
	execute immediate 'alter sequence ' || p_schema_owner || '.' || p_seq_name || ' increment by 1 minvalue ' || l_minvalue;

	dbms_output.put_line('-------------------------------------------------------');

END RESET_SEQ;


PROCEDURE RESET_SEQ_TO_DATA(p_schema_owner varchar2, p_TableName varchar2, p_FieldName varchar2, p_seq_name  varchar2)
IS
  l_MaxUsed NUMBER;
BEGIN

	dbms_output.put_line('-------------------------------------------------------');
	dbms_output.put_line('-- Reset Sequence from Data');
	dbms_output.put_line('-------------------------------------------------------');
    dbms_output.put_line('-- p_schema_owner = ' || p_schema_owner);
    dbms_output.put_line('-- p_TableName = ' || p_TableName);
	dbms_output.put_line('-- p_FieldName = ' || p_FieldName);
	dbms_output.put_line('-- p_seq_name = ' || p_seq_name);
	dbms_output.put_line('-------------------------------------------------------');
	-- Determine max number for the field specified
	execute IMMEDIATE 'select coalesce(max(' || p_FieldName || '),0) from '|| p_schema_owner || '.' || p_TableName into l_MaxUsed;

	dbms_output.put_line('-- MaxUsed = ' || l_MaxUsed);

	dbms_output.put_line('-- Calling Reset sequence');
	RESET_SEQ(p_schema_owner, p_seq_name, l_MaxUsed );

    dbms_output.put_line('-------------------------------------------------------');
   
END RESET_SEQ_TO_DATA;

END NTC_UTIL;

/




CREATE  OR REPLACE  TRIGGER TY001_BI_LANGUAGE_SEQ
  BEFORE INSERT
  ON TY001_LANGUAGE
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for TY001_BI_LANGUAGE_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.LANGUAGE_ID = 0  THEN

         SELECT TY001_LANGUAGE_SEQ.NEXTVAL INTO :NEW.LANGUAGE_ID FROM DUAL;

       ELSIF  :NEW.LANGUAGE_ID IS NULL THEN

                 SELECT TY001_LANGUAGE_SEQ.NEXTVAL INTO :NEW.LANGUAGE_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  TY001_LANGUAGE on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="TY001_LANGUAGE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TY001_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE TY001_LANGUAGE
      SET
        /* TY001_LANGUAGE.USER_LAST_UPDATE_ID = NULL */
        TY001_LANGUAGE.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* TY001_LANGUAGE.LANGUAGE_ID = :new.LANGUAGE_ID */
         and TY001_LANGUAGE.LANGUAGE_ID = :new.LANGUAGE_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  TY001_LANGUAGE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="TY001_LANGUAGE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TY001_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TY001_LANGUAGE because YY000_USER does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER TY001_BI_LANGUAGE_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER TY003_BI_RESOURCE_SEQ
  BEFORE INSERT
  ON TY003_RESOURCE
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for TY003_BI_RESOURCE_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.RESOURCE_ID = 0  THEN

         SELECT TY003_RESOURCE_SEQ.NEXTVAL INTO :NEW.RESOURCE_ID FROM DUAL;

       ELSIF  :NEW.RESOURCE_ID IS NULL THEN

                 SELECT TY003_RESOURCE_SEQ.NEXTVAL INTO :NEW.RESOURCE_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  TY003_RESOURCE on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="TY003_RESOURCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TY003_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE TY003_RESOURCE
      SET
        /* TY003_RESOURCE.USER_LAST_UPDATE_ID = NULL */
        TY003_RESOURCE.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* TY003_RESOURCE.RESOURCE_ID = :new.RESOURCE_ID */
         and TY003_RESOURCE.RESOURCE_ID = :new.RESOURCE_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  TY003_RESOURCE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="TY003_RESOURCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TY003_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TY003_RESOURCE because YY000_USER does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER TY003_BI_RESOURCE_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER TY007_BI_FIELD_SET_SEQ
  BEFORE INSERT
  ON TY007_FIELD_SET
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for TY007_BI_FIELD_SET_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.FIELD_SET_ID = 0  THEN

         SELECT TY007_FIELD_SET_SEQ.NEXTVAL INTO :NEW.FIELD_SET_ID FROM DUAL;

       ELSIF  :NEW.FIELD_SET_ID IS NULL THEN

                 SELECT TY007_FIELD_SET_SEQ.NEXTVAL INTO :NEW.FIELD_SET_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  TY007_FIELD_SET on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="TY007_FIELD_SET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TY007_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE TY007_FIELD_SET
      SET
        /* TY007_FIELD_SET.USER_LAST_UPDATE_ID = NULL */
        TY007_FIELD_SET.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* TY007_FIELD_SET.FIELD_SET_ID = :new.FIELD_SET_ID */
         and TY007_FIELD_SET.FIELD_SET_ID = :new.FIELD_SET_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  TY007_FIELD_SET on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="TY007_FIELD_SET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TY007_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TY007_FIELD_SET because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY003_RESOURCE belongs to TY007_FIELD_SET on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY003_RESOURCE"
    CHILD_OWNER="", CHILD_TABLE="TY007_FIELD_SET"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="TY007_TY003_FK", FK_COLUMNS="RESOURCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TY003_RESOURCE
      WHERE
        /* :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID */
        :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TY007_FIELD_SET because TY003_RESOURCE does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER TY007_BI_FIELD_SET_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY000_BI_USER_SEQ
  BEFORE INSERT
  ON YY000_USER
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY000_BI_USER_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.USER_ID = 0  THEN

         SELECT YY000_USER_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;

       ELSIF  :NEW.USER_ID IS NULL THEN

                 SELECT YY000_USER_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY000_USER on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY000_USER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY000_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY000_USER
      SET
        /* YY000_USER.USER_LAST_UPDATE_ID = NULL */
        YY000_USER.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY000_USER.USER_ID = :new.USER_ID */
         and YY000_USER.USER_ID = :new.USER_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY000_USER on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY000_USER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY000_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    UPDATE YY000_USER
      SET
        /* YY000_USER.USER_CREATED_ID = NULL */
        YY000_USER.USER_CREATED_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
              :new.USER_CREATED_ID = YY000_USER.USER_ID
        ) 
        /* YY000_USER.USER_ID = :new.USER_ID */
         and YY000_USER.USER_ID = :new.USER_ID;



END;


/



ALTER TRIGGER YY000_BI_USER_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY001_BI_PROGRAM_SEQ
  BEFORE INSERT
  ON YY001_PROGRAM
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY001_BI_PROGRAM_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.PROGRAM_ID = 0  THEN

         SELECT YY001_PROGRAM_SEQ.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;

       ELSIF  :NEW.PROGRAM_ID IS NULL THEN

                 SELECT YY001_PROGRAM_SEQ.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY001_PROGRAM on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY001_PROGRAM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY001_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY001_PROGRAM
      SET
        /* YY001_PROGRAM.USER_LAST_UPDATE_ID = NULL */
        YY001_PROGRAM.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY001_PROGRAM.PROGRAM_ID = :new.PROGRAM_ID */
         and YY001_PROGRAM.PROGRAM_ID = :new.PROGRAM_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY001_PROGRAM on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY001_PROGRAM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY001_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY001_PROGRAM because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY003_RESOURCE belongs to YY001_PROGRAM on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY003_RESOURCE"
    CHILD_OWNER="", CHILD_TABLE="YY001_PROGRAM"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY001_TY003_FK", FK_COLUMNS="RESOURCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TY003_RESOURCE
      WHERE
        /* :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID */
        :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY001_PROGRAM because TY003_RESOURCE does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY001_BI_PROGRAM_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY002_BI_TIME_WINDOW_SEQ
  BEFORE INSERT
  ON YY002_TIME_WINDOW
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY002_BI_TIME_WINDOW_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.TIME_WINDOW_ID = 0  THEN

         SELECT YY002_TIME_WINDOW_SEQ.NEXTVAL INTO :NEW.TIME_WINDOW_ID FROM DUAL;

       ELSIF  :NEW.TIME_WINDOW_ID IS NULL THEN

                 SELECT YY002_TIME_WINDOW_SEQ.NEXTVAL INTO :NEW.TIME_WINDOW_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY002_TIME_WINDOW on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY002_TIME_WINDOW"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY002_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY002_TIME_WINDOW
      SET
        /* YY002_TIME_WINDOW.USER_LAST_UPDATE_ID = NULL */
        YY002_TIME_WINDOW.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY002_TIME_WINDOW.TIME_WINDOW_ID = :new.TIME_WINDOW_ID */
         and YY002_TIME_WINDOW.TIME_WINDOW_ID = :new.TIME_WINDOW_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY002_TIME_WINDOW on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY002_TIME_WINDOW"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY002_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY002_TIME_WINDOW because YY000_USER does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY002_BI_TIME_WINDOW_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY003_BI_FORM_SEQ
  BEFORE INSERT
  ON YY003_FORM
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY003_BI_FORM_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.FORM_ID = 0  THEN

         SELECT YY003_FORM_SEQ.NEXTVAL INTO :NEW.FORM_ID FROM DUAL;

       ELSIF  :NEW.FORM_ID IS NULL THEN

                 SELECT YY003_FORM_SEQ.NEXTVAL INTO :NEW.FORM_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY003_FORM on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY003_FORM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY003_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY003_FORM
      SET
        /* YY003_FORM.USER_LAST_UPDATE_ID = NULL */
        YY003_FORM.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY003_FORM.FORM_ID = :new.FORM_ID */
         and YY003_FORM.FORM_ID = :new.FORM_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY003_FORM on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY003_FORM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY003_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY003_FORM because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* YY002_TIME_WINDOW belongs to YY003_FORM on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY002_TIME_WINDOW"
    CHILD_OWNER="", CHILD_TABLE="YY003_FORM"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY003_YY002_FK", FK_COLUMNS="ACTIVE_TIME_WINDOW_ID" */
    UPDATE YY003_FORM
      SET
        /* YY003_FORM.ACTIVE_TIME_WINDOW_ID = NULL */
        YY003_FORM.ACTIVE_TIME_WINDOW_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY002_TIME_WINDOW
            WHERE
              /* :new.ACTIVE_TIME_WINDOW_ID = YY002_TIME_WINDOW.TIME_WINDOW_ID */
              :new.ACTIVE_TIME_WINDOW_ID = YY002_TIME_WINDOW.TIME_WINDOW_ID
        ) 
        /* YY003_FORM.FORM_ID = :new.FORM_ID */
         and YY003_FORM.FORM_ID = :new.FORM_ID;

/* ERwin Builtin Trigger */
    /* TY003_RESOURCE belongs to YY003_FORM on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY003_RESOURCE"
    CHILD_OWNER="", CHILD_TABLE="YY003_FORM"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY003_TY003_FK", FK_COLUMNS="RESOURCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TY003_RESOURCE
      WHERE
        /* :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID */
        :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY003_FORM because TY003_RESOURCE does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* YY001_PROGRAM has YY003_FORM on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY001_PROGRAM"
    CHILD_OWNER="", CHILD_TABLE="YY003_FORM"
    P2C_VERB_PHRASE="has", C2P_VERB_PHRASE="belongs to", 
    FK_CONSTRAINT="YY003_YY001_FK", FK_COLUMNS="PROGRAM_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY001_PROGRAM
      WHERE
        /* :new.PROGRAM_ID = YY001_PROGRAM.PROGRAM_ID */
        :new.PROGRAM_ID = YY001_PROGRAM.PROGRAM_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY003_FORM because YY001_PROGRAM does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY003_BI_FORM_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY004_BI_SECTION_SEQ
  BEFORE INSERT
  ON YY004_SECTION
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY004_BI_SECTION_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.SECTION_ID = 0  THEN

         SELECT YY004_SECTION_SEQ.NEXTVAL INTO :NEW.SECTION_ID FROM DUAL;

       ELSIF  :NEW.SECTION_ID IS NULL THEN

                 SELECT YY004_SECTION_SEQ.NEXTVAL INTO :NEW.SECTION_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY004_SECTION on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY004_SECTION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY004_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY004_SECTION
      SET
        /* YY004_SECTION.USER_LAST_UPDATE_ID = NULL */
        YY004_SECTION.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY004_SECTION.SECTION_ID = :new.SECTION_ID */
         and YY004_SECTION.SECTION_ID = :new.SECTION_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY004_SECTION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY004_SECTION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY004_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY004_SECTION because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY003_RESOURCE belongs to YY004_SECTION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY003_RESOURCE"
    CHILD_OWNER="", CHILD_TABLE="YY004_SECTION"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY004_TY003_FK", FK_COLUMNS="RESOURCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TY003_RESOURCE
      WHERE
        /* :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID */
        :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY004_SECTION because TY003_RESOURCE does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* YY003_FORM has YY004_SECTION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY003_FORM"
    CHILD_OWNER="", CHILD_TABLE="YY004_SECTION"
    P2C_VERB_PHRASE="has", C2P_VERB_PHRASE="belongs to", 
    FK_CONSTRAINT="YY004_YY003_FK", FK_COLUMNS="FORM_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY003_FORM
      WHERE
        /* :new.FORM_ID = YY003_FORM.FORM_ID */
        :new.FORM_ID = YY003_FORM.FORM_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY004_SECTION because YY003_FORM does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY004_BI_SECTION_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY005_BI_FIELD_SEQ
  BEFORE INSERT
  ON YY005_FIELD
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY005_BI_FIELD_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.FIELD_ID = 0  THEN

         SELECT YY005_FIELD_SEQ.NEXTVAL INTO :NEW.FIELD_ID FROM DUAL;

       ELSIF  :NEW.FIELD_ID IS NULL THEN

                 SELECT YY005_FIELD_SEQ.NEXTVAL INTO :NEW.FIELD_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY005_FIELD on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY005_FIELD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY005_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY005_FIELD
      SET
        /* YY005_FIELD.USER_LAST_UPDATE_ID = NULL */
        YY005_FIELD.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY005_FIELD.FIELD_ID = :new.FIELD_ID */
         and YY005_FIELD.FIELD_ID = :new.FIELD_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY005_FIELD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY005_FIELD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY005_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY005_FIELD because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY007_FIELD_SET belongs to YY005_FIELD on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY007_FIELD_SET"
    CHILD_OWNER="", CHILD_TABLE="YY005_FIELD"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY005_TY007_FK", FK_COLUMNS="FIELD_SET_ID" */
    UPDATE YY005_FIELD
      SET
        /* YY005_FIELD.FIELD_SET_ID = NULL */
        YY005_FIELD.FIELD_SET_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM TY007_FIELD_SET
            WHERE
              /* :new.FIELD_SET_ID = TY007_FIELD_SET.FIELD_SET_ID */
              :new.FIELD_SET_ID = TY007_FIELD_SET.FIELD_SET_ID
        ) 
        /* YY005_FIELD.FIELD_ID = :new.FIELD_ID */
         and YY005_FIELD.FIELD_ID = :new.FIELD_ID;

/* ERwin Builtin Trigger */
    /* TY003_RESOURCE belongs to YY005_FIELD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY003_RESOURCE"
    CHILD_OWNER="", CHILD_TABLE="YY005_FIELD"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY005_TY003_FK", FK_COLUMNS="RESOURCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TY003_RESOURCE
      WHERE
        /* :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID */
        :new.RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY005_FIELD because TY003_RESOURCE does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY004_FIELD_TYPE belongs to YY005_FIELD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY004_FIELD_TYPE"
    CHILD_OWNER="", CHILD_TABLE="YY005_FIELD"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY005_TY004_FK", FK_COLUMNS="FIELD_TYPE_CD" */
    SELECT count(*) INTO NUMROWS
      FROM TY004_FIELD_TYPE
      WHERE
        /* :new.FIELD_TYPE_CD = TY004_FIELD_TYPE.FIELD_TYPE_CD */
        :new.FIELD_TYPE_CD = TY004_FIELD_TYPE.FIELD_TYPE_CD;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY005_FIELD because TY004_FIELD_TYPE does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY005_BI_FIELD_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY006_BI_VALIDATION_SEQ
  BEFORE INSERT
  ON YY006_VALIDATION
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY006_BI_VALIDATION_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.VALIDATION_ID = 0  THEN

         SELECT YY006_VALIDATION_SEQ.NEXTVAL INTO :NEW.VALIDATION_ID FROM DUAL;

       ELSIF  :NEW.VALIDATION_ID IS NULL THEN

                 SELECT YY006_VALIDATION_SEQ.NEXTVAL INTO :NEW.VALIDATION_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY006_VALIDATION on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY006_VALIDATION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY006_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY006_VALIDATION
      SET
        /* YY006_VALIDATION.USER_LAST_UPDATE_ID = NULL */
        YY006_VALIDATION.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY006_VALIDATION.VALIDATION_ID = :new.VALIDATION_ID */
         and YY006_VALIDATION.VALIDATION_ID = :new.VALIDATION_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY006_VALIDATION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY006_VALIDATION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY006_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY006_VALIDATION because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY003_RESOURCE belongs to YY006_VALIDATION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY003_RESOURCE"
    CHILD_OWNER="", CHILD_TABLE="YY006_VALIDATION"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY006_TY003_FK3", FK_COLUMNS="ERROR_MESSAGE_RESOURCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TY003_RESOURCE
      WHERE
        /* :new.ERROR_MESSAGE_RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID */
        :new.ERROR_MESSAGE_RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY006_VALIDATION because TY003_RESOURCE does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY003_RESOURCE belongs to YY006_VALIDATION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY003_RESOURCE"
    CHILD_OWNER="", CHILD_TABLE="YY006_VALIDATION"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY006_TY003_FK2", FK_COLUMNS="ERROR_RESOURCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TY003_RESOURCE
      WHERE
        /* :new.ERROR_RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID */
        :new.ERROR_RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY006_VALIDATION because TY003_RESOURCE does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY003_RESOURCE belongs to YY006_VALIDATION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY003_RESOURCE"
    CHILD_OWNER="", CHILD_TABLE="YY006_VALIDATION"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY006_TY003_FK1", FK_COLUMNS="ADMIN_RESOURCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TY003_RESOURCE
      WHERE
        /* :new.ADMIN_RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID */
        :new.ADMIN_RESOURCE_ID = TY003_RESOURCE.RESOURCE_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY006_VALIDATION because TY003_RESOURCE does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY006_BI_VALIDATION_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY007_BI_VALIDATION_RULE_SEQ
  BEFORE INSERT
  ON YY007_VALIDATION_RULE
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY007_BI_VALIDATION_RULE_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.VALIDATION_RULE_ID = 0  THEN

         SELECT YY007_VALIDATION_RULE_SEQ.NEXTVAL INTO :NEW.VALIDATION_RULE_ID FROM DUAL;

       ELSIF  :NEW.VALIDATION_RULE_ID IS NULL THEN

                 SELECT YY007_VALIDATION_RULE_SEQ.NEXTVAL INTO :NEW.VALIDATION_RULE_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY007_VALIDATION_RULE on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY007_VALIDATION_RULE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY007_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY007_VALIDATION_RULE
      SET
        /* YY007_VALIDATION_RULE.USER_LAST_UPDATE_ID = NULL */
        YY007_VALIDATION_RULE.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY007_VALIDATION_RULE.VALIDATION_RULE_ID = :new.VALIDATION_RULE_ID */
         and YY007_VALIDATION_RULE.VALIDATION_RULE_ID = :new.VALIDATION_RULE_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY007_VALIDATION_RULE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY007_VALIDATION_RULE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY007_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY007_VALIDATION_RULE because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY006_VALIDATION_OPERATOR belongs to YY007_VALIDATION_RULE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY006_VALIDATION_OPERATOR"
    CHILD_OWNER="", CHILD_TABLE="YY007_VALIDATION_RULE"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY007_TY006_FK", FK_COLUMNS="VALIDATION_OPERATOR_CD" */
    SELECT count(*) INTO NUMROWS
      FROM TY006_VALIDATION_OPERATOR
      WHERE
        /* :new.VALIDATION_OPERATOR_CD = TY006_VALIDATION_OPERATOR.VALIDATION_OPERATOR_CD */
        :new.VALIDATION_OPERATOR_CD = TY006_VALIDATION_OPERATOR.VALIDATION_OPERATOR_CD;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY007_VALIDATION_RULE because TY006_VALIDATION_OPERATOR does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* TY005_VALIDATION_ATTRIBUTE belongs to YY007_VALIDATION_RULE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TY005_VALIDATION_ATTRIBUTE"
    CHILD_OWNER="", CHILD_TABLE="YY007_VALIDATION_RULE"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY007_TY005_FK", FK_COLUMNS="VALIDATION_ATTRIBUTE_CD" */
    SELECT count(*) INTO NUMROWS
      FROM TY005_VALIDATION_ATTRIBUTE
      WHERE
        /* :new.VALIDATION_ATTRIBUTE_CD = TY005_VALIDATION_ATTRIBUTE.VALIDATION_ATTRIBUTE_CD */
        :new.VALIDATION_ATTRIBUTE_CD = TY005_VALIDATION_ATTRIBUTE.VALIDATION_ATTRIBUTE_CD;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY007_VALIDATION_RULE because TY005_VALIDATION_ATTRIBUTE does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* YY006_VALIDATION has YY007_VALIDATION_RULE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY006_VALIDATION"
    CHILD_OWNER="", CHILD_TABLE="YY007_VALIDATION_RULE"
    P2C_VERB_PHRASE="has", C2P_VERB_PHRASE="belongs to", 
    FK_CONSTRAINT="YY007_YY006_FK", FK_COLUMNS="VALIDATION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY006_VALIDATION
      WHERE
        /* :new.VALIDATION_ID = YY006_VALIDATION.VALIDATION_ID */
        :new.VALIDATION_ID = YY006_VALIDATION.VALIDATION_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY007_VALIDATION_RULE because YY006_VALIDATION does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY007_BI_VALIDATION_RULE_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY010_BI_DOCUMENT_SEQ
  BEFORE INSERT
  ON YY010_DOCUMENT
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY010_BI_DOCUMENT_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.DOCUMENT_ID = 0  THEN

         SELECT YY010_DOCUMENT_SEQ.NEXTVAL INTO :NEW.DOCUMENT_ID FROM DUAL;

       ELSIF  :NEW.DOCUMENT_ID IS NULL THEN

                 SELECT YY010_DOCUMENT_SEQ.NEXTVAL INTO :NEW.DOCUMENT_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY010_DOCUMENT on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY010_DOCUMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY010_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY010_DOCUMENT
      SET
        /* YY010_DOCUMENT.USER_LAST_UPDATE_ID = NULL */
        YY010_DOCUMENT.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY010_DOCUMENT.DOCUMENT_ID = :new.DOCUMENT_ID */
         and YY010_DOCUMENT.DOCUMENT_ID = :new.DOCUMENT_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY010_DOCUMENT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY010_DOCUMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY010_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY010_DOCUMENT because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* YY011_DOCUMENT_DATA belongs to YY010_DOCUMENT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY011_DOCUMENT_DATA"
    CHILD_OWNER="", CHILD_TABLE="YY010_DOCUMENT"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY010_YY011_FK", FK_COLUMNS="DOCUMENT_DATA_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY011_DOCUMENT_DATA
      WHERE
        /* :new.DOCUMENT_DATA_ID = YY011_DOCUMENT_DATA.DOCUMENT_DATA_ID */
        :new.DOCUMENT_DATA_ID = YY011_DOCUMENT_DATA.DOCUMENT_DATA_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY010_DOCUMENT because YY011_DOCUMENT_DATA does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY010_BI_DOCUMENT_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY011_BI_DOCUMENT_DATA_SEQ
  BEFORE INSERT
  ON YY011_DOCUMENT_DATA
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY011_BI_DOCUMENT_DATA_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.DOCUMENT_DATA_ID = 0  THEN

         SELECT YY011_DOCUMENT_DATA_SEQ.NEXTVAL INTO :NEW.DOCUMENT_DATA_ID FROM DUAL;

       ELSIF  :NEW.DOCUMENT_DATA_ID IS NULL THEN

                 SELECT YY011_DOCUMENT_DATA_SEQ.NEXTVAL INTO :NEW.DOCUMENT_DATA_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY011_DOCUMENT_DATA on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY011_DOCUMENT_DATA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY011_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY011_DOCUMENT_DATA
      SET
        /* YY011_DOCUMENT_DATA.USER_LAST_UPDATE_ID = NULL */
        YY011_DOCUMENT_DATA.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY011_DOCUMENT_DATA.DOCUMENT_DATA_ID = :new.DOCUMENT_DATA_ID */
         and YY011_DOCUMENT_DATA.DOCUMENT_DATA_ID = :new.DOCUMENT_DATA_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY011_DOCUMENT_DATA on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY011_DOCUMENT_DATA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY011_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY011_DOCUMENT_DATA because YY000_USER does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY011_BI_DOCUMENT_DATA_SEQ
	ENABLE;


CREATE  OR REPLACE  TRIGGER YY014_BI_SUBMISSION_SEQ
  BEFORE INSERT
  ON YY014_SUBMISSION
  
  for each row
  
/* ERwin Builtin Trigger */
/* default body for YY014_BI_SUBMISSION_SEQ */
DECLARE NUMROWS INTEGER;
BEGIN

IF INSERTING THEN
        IF :NEW.SUBMISSION_ID = 0  THEN

         SELECT YY014_SUBMISSION_SEQ.NEXTVAL INTO :NEW.SUBMISSION_ID FROM DUAL;

       ELSIF  :NEW.SUBMISSION_ID IS NULL THEN

                 SELECT YY014_SUBMISSION_SEQ.NEXTVAL INTO :NEW.SUBMISSION_ID FROM DUAL;
            END IF;
    END IF;


/* ERwin Builtin Trigger */
    /* YY000_USER  YY014_SUBMISSION on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY014_SUBMISSION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY014_YY000_UPDATE_FK", FK_COLUMNS="USER_LAST_UPDATE_ID" */
    UPDATE YY014_SUBMISSION
      SET
        /* YY014_SUBMISSION.USER_LAST_UPDATE_ID = NULL */
        YY014_SUBMISSION.USER_LAST_UPDATE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM YY000_USER
            WHERE
              /* :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID */
              :new.USER_LAST_UPDATE_ID = YY000_USER.USER_ID
        ) 
        /* YY014_SUBMISSION.SUBMISSION_ID = :new.SUBMISSION_ID */
         and YY014_SUBMISSION.SUBMISSION_ID = :new.SUBMISSION_ID;

/* ERwin Builtin Trigger */
    /* YY000_USER  YY014_SUBMISSION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY014_SUBMISSION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="YY014_YY000_CREATE_FK", FK_COLUMNS="USER_CREATED_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_CREATED_ID = YY000_USER.USER_ID */
        :new.USER_CREATED_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY014_SUBMISSION because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* YY000_USER belongs to YY014_SUBMISSION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY000_USER"
    CHILD_OWNER="", CHILD_TABLE="YY014_SUBMISSION"
    P2C_VERB_PHRASE="belongs to", C2P_VERB_PHRASE="has", 
    FK_CONSTRAINT="YY014_YY000_FK", FK_COLUMNS="USER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY000_USER
      WHERE
        /* :new.USER_ID = YY000_USER.USER_ID */
        :new.USER_ID = YY000_USER.USER_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY014_SUBMISSION because YY000_USER does not exist.'
      );
    END IF;

/* ERwin Builtin Trigger */
    /* YY003_FORM has YY014_SUBMISSION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="YY003_FORM"
    CHILD_OWNER="", CHILD_TABLE="YY014_SUBMISSION"
    P2C_VERB_PHRASE="has", C2P_VERB_PHRASE="belongs to", 
    FK_CONSTRAINT="YY014_YY003_FK", FK_COLUMNS="FORM_ID" */
    SELECT count(*) INTO NUMROWS
      FROM YY003_FORM
      WHERE
        /* :new.FORM_ID = YY003_FORM.FORM_ID */
        :new.FORM_ID = YY003_FORM.FORM_ID;
    IF (
      /*  */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert YY014_SUBMISSION because YY003_FORM does not exist.'
      );
    END IF;



END;


/



ALTER TRIGGER YY014_BI_SUBMISSION_SEQ
	ENABLE;
